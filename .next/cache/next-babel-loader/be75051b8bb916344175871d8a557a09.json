{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { icons } from '../../icons/icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport ExpandedVideo from '../ExpandedVideo/ExpandedVideo';\n\nconst css = require('./Item.module.css');\n\nconst SHOW_TRESHOLD = 100; // pixels\n\nconst Item = props => {\n  const [showItem, toggleShowItem] = React.useState(false);\n  const [showVideo, toggleShowVideo] = React.useState(false);\n  const itemRef = React.useRef(null); // update the event listeners every time the showItem state is changed\n\n  React.useEffect(() => {\n    window.addEventListener('scroll', checkIfInViewport, true);\n    return () => window.removeEventListener('scroll', checkIfInViewport, true);\n  }, [showItem]);\n\n  const checkIfInViewport = () => {\n    if (itemRef && itemRef.current) {\n      const itemPos = itemRef.current.getBoundingClientRect().top;\n      const windowHeight = window.innerHeight;\n      const newShowItem = itemPos < windowHeight - SHOW_TRESHOLD;\n      if (newShowItem !== showItem) toggleShowItem(newShowItem);\n    }\n  };\n\n  const itemClasses = [css.Item, showItem && css.show].join(' ');\n  return __jsx(\"div\", {\n    className: itemClasses,\n    ref: itemRef\n  }, __jsx(\"p\", {\n    className: css.Title\n  }, __jsx(\"span\", null, props.title)), __jsx(\"div\", {\n    className: css.ItemContent\n  }, __jsx(ItemPreview, {\n    video_src: props.video_src,\n    preview_src: props.preview_src,\n    gif_src: props.gif_src,\n    link: props.link,\n    githubLink: props.githubLink,\n    toggle: toggleShowVideo\n  }), __jsx(ItemInfo, {\n    languages: props.language,\n    title: props.title,\n    desc: props.description,\n    desktop: props.desktop,\n    mobile: props.mobile,\n    link: props.link,\n    githubLink: props.githubLink\n  })), showVideo && __jsx(ExpandedVideo, {\n    video_src: props.video_src,\n    close: () => toggleShowVideo(false)\n  }));\n};\n\nconst ItemInfo = props => {\n  return __jsx(\"div\", {\n    className: css.InfoContainer\n  }, __jsx(\"div\", {\n    className: css.MadeWith\n  }, \"made with\", props.languages.map((lang, index) => __jsx(\"p\", {\n    key: lang,\n    className: css.Language\n  }, lang, index !== props.languages.length - 1 ? __jsx(\"span\", {\n    style: {\n      color: 'dimgray'\n    }\n  }, \" + \") : ''))), __jsx(\"p\", {\n    className: css.Description\n  }, props.desc), __jsx(\"div\", {\n    className: css.IconsAndLinks\n  }, __jsx(\"div\", {\n    className: css.ItemLinks\n  }, __jsx(\"a\", {\n    className: css.ItemLinkContainer,\n    href: props.githubLink,\n    target: \"_blank\",\n    rel: \"noopener noreferrer\"\n  }, __jsx(\"p\", {\n    className: css.ItemLink\n  }, \"Github\"), __jsx(\"div\", {\n    className: css.ItemLinkIcon\n  }, __jsx(FontAwesomeIcon, {\n    icon: icons.faGithub\n  }))), __jsx(\"a\", {\n    className: css.ItemLinkContainer,\n    href: props.link,\n    target: \"_blank\",\n    rel: \"noopener noreferrer\"\n  }, __jsx(\"p\", {\n    className: css.ItemLink\n  }, \"Open\"), __jsx(\"div\", {\n    className: css.ItemLinkIcon\n  }, __jsx(FontAwesomeIcon, {\n    icon: icons.faExternalLinkSquareAlt\n  })))), __jsx(HardwareIcons, {\n    desktop: props.desktop,\n    mobile: props.mobile\n  })));\n};\n\nconst HardwareIcons = ({\n  desktop,\n  mobile\n}) => __jsx(\"div\", {\n  className: css.HardwareIcons\n}, __jsx(\"div\", {\n  className: css.HardwareIconContainer\n}, __jsx(\"div\", {\n  className: [css.HardwareIcon, css.DesktopIcon].join(' ')\n}, __jsx(FontAwesomeIcon, {\n  icon: icons.faDesktop\n})), desktop ? __jsx(CheckMarkIcon, null) : __jsx(TimesIcon, null)), __jsx(\"div\", {\n  className: css.HardwareIconContainer\n}, __jsx(\"div\", {\n  className: [css.HardwareIcon, css.MobileIcon].join(' ')\n}, __jsx(FontAwesomeIcon, {\n  icon: icons.faMobileAlt\n})), mobile ? __jsx(CheckMarkIcon, null) : __jsx(TimesIcon, null)));\n\nconst CheckMarkIcon = () => __jsx(\"div\", {\n  className: [css.HardwareIcon, css.CheckMarkIcon].join(' ')\n}, __jsx(FontAwesomeIcon, {\n  icon: icons.faCheck,\n  color: \"green\"\n}));\n\nconst TimesIcon = () => __jsx(\"div\", {\n  className: [css.HardwareIcon, css.TimesIcon].join(' ')\n}, __jsx(FontAwesomeIcon, {\n  icon: icons.faTimes,\n  color: \"crimson\"\n}));\n\nconst ItemPreview = props => {\n  return __jsx(\"div\", {\n    className: css.PreviewContainer\n  }, __jsx(\"video\", {\n    className: css.PreviewVideo,\n    poster: props.gif_src,\n    muted: true,\n    autoPlay: true,\n    playsInline: true,\n    loop: true\n  }, __jsx(\"source\", {\n    src: props.preview_src,\n    type: \"video/mp4\"\n  })), __jsx(\"div\", {\n    className: css.PreviewMask\n  }, __jsx(\"div\", {\n    className: css.MaskLinks\n  }, __jsx(ExpandVideo, {\n    toggle: props.toggle\n  }))));\n};\n\nconst ExpandVideo = ({\n  toggle\n}) => {\n  const classes = [css.ExpandVideo].join(' ');\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: classes,\n    onClick: () => toggle(true)\n  }, __jsx(\"p\", null, \"Expand Video\"), __jsx(FontAwesomeIcon, {\n    icon: icons.faExpand,\n    color: \"white\"\n  })));\n};\n\nconst MaskLink = ({\n  address,\n  text\n}) => {\n  return __jsx(\"a\", {\n    href: address,\n    className: css.MaskLink,\n    target: \"_blank\",\n    rel: \"noopener noreferrer\"\n  }, __jsx(\"div\", {\n    className: css.MaskLinkText\n  }, __jsx(\"span\", null, text)));\n};\n\nexport default Item;","map":null,"metadata":{},"sourceType":"module"}