{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport { CubeSpinner } from '../../UI/Spinner/Spinner';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { icons } from '../../../icons/icons';\n\nconst css = require('./ItemForm.module.css');\n\nconst initialForm = {\n  title: {\n    id: 'title',\n    elemType: 'input',\n    type: 'text',\n    placeholder: 'title',\n    require: true,\n    value: ''\n  },\n  description: {\n    id: 'description',\n    elemType: 'textarea',\n    type: 'text',\n    placeholder: 'description',\n    require: true,\n    value: ''\n  },\n  languages: {\n    id: 'languages',\n    elemType: 'select',\n    options: {\n      React: {\n        selected: false\n      },\n      TypeScript: {\n        selected: false\n      },\n      JavaScript: {\n        selected: false\n      },\n      Cpp: {\n        selected: false\n      },\n      NextJS: {\n        selected: false\n      }\n    },\n    require: true,\n    multiple: true\n  },\n  link: {\n    id: 'link',\n    elemType: 'input',\n    type: 'text',\n    placeholder: 'link to app',\n    require: true,\n    value: ''\n  },\n  github: {\n    id: 'github',\n    elemType: 'input',\n    type: 'text',\n    placeholder: 'github link',\n    require: true,\n    value: ''\n  },\n  video_src: {\n    id: 'video_src',\n    elemType: 'input',\n    type: 'text',\n    placeholder: 'video link',\n    require: true,\n    value: ''\n  },\n  gif_src: {\n    id: 'gif_src',\n    elemType: 'input',\n    type: 'text',\n    placeholder: 'gif link',\n    require: true,\n    value: ''\n  },\n  desktop: {\n    id: 'desktop',\n    elemType: 'select',\n    options: {\n      Yes: {\n        selected: true\n      },\n      No: {\n        selected: false\n      }\n    },\n    require: true\n  },\n  mobile: {\n    id: 'mobile',\n    elemType: 'select',\n    options: {\n      Yes: {\n        selected: true\n      },\n      No: {\n        selected: false\n      }\n    },\n    require: true\n  }\n};\n\nconst ItemForm = ({\n  show,\n  close,\n  add,\n  sending\n}) => {\n  const [form, setForm] = React.useState(initialForm);\n  console.log(form.languages.options);\n\n  const optionClickHandler = (id, name) => {\n    const updatedForm = _objectSpread({}, form, {\n      [id]: _objectSpread({}, form[id], {\n        options: _objectSpread({}, form[id].options, {\n          [name]: _objectSpread({}, form[id].options[name], {\n            selected: !form[id].options[name].selected\n          })\n        })\n      })\n    });\n\n    setForm(updatedForm);\n  };\n\n  const changeHandler = (id, event) => {\n    let updatedForm = _objectSpread({}, form);\n\n    updatedForm = _objectSpread({}, form, {\n      [id]: _objectSpread({}, form[id], {\n        value: event.target.value\n      })\n    });\n    setForm(updatedForm);\n  };\n\n  const addHandler = () => {\n    const newItem = {\n      title: form.title.value,\n      language: [...form.languages.selected],\n      description: form.description.value,\n      link: form.link.value,\n      githubLink: form.github.value,\n      video_src: form.video_src.value,\n      gif_src: form.gif_src.value,\n      desktop: form.desktop.value === 'Yes',\n      mobile: form.mobile.value === 'Yes,'\n    };\n    add(newItem);\n  };\n\n  const itemFormStyles = [css.ItemForm, show && css.show].join(' ');\n  const backdropStyles = [css.FormBackdrop, show && css.show].join(' ');\n  return __jsx(React.Fragment, null, __jsx(\"form\", {\n    className: itemFormStyles\n  }, sending && __jsx(\"div\", {\n    className: css.Loading\n  }, __jsx(CubeSpinner, null)), __jsx(FontAwesomeIcon, {\n    className: css.FormCloseButton,\n    icon: icons.faTimes,\n    onClick: close\n  }), _Object$keys(form).map(element => {\n    return __jsx(FormInput, {\n      key: element,\n      item: form[element],\n      change: changeHandler,\n      clickOption: optionClickHandler\n    });\n  }), __jsx(\"div\", {\n    className: css.FormAddButton,\n    onClick: addHandler\n  }, __jsx(\"p\", null, \"add\"))), __jsx(\"div\", {\n    className: backdropStyles\n  }));\n};\n\nconst FormInput = React.memo(({\n  item,\n  change,\n  clickOption\n}) => {\n  let content = undefined;\n\n  switch (item.elemType) {\n    case 'input':\n      content = __jsx(\"input\", {\n        value: item.value,\n        placeholder: item.placeholder,\n        onChange: e => change(item.id, e),\n        className: css.FormInput\n      });\n      break;\n\n    case 'textarea':\n      content = __jsx(\"textarea\", {\n        value: item.value,\n        onChange: e => change(item.id, e),\n        placeholder: item.placeholder,\n        className: css.FormInput,\n        rows: 5\n      });\n      break;\n\n    case 'select':\n      content = __jsx(\"div\", {\n        className: css.Select\n      }, _Object$keys(item.options).map(option => {\n        console.log(option.selected);\n        return __jsx(\"span\", {\n          key: option.name,\n          className: [css.Option, option.selected && css.selected].join(' '),\n          onClick: () => clickOption(item.id, option)\n        }, option);\n      }));\n      break;\n  }\n\n  return __jsx(\"div\", {\n    className: css.FormInputContainer\n  }, __jsx(\"p\", {\n    className: css.FormInputTitle\n  }, item.id), content);\n});\nexport default ItemForm;","map":{"version":3,"sources":["C:/Users/jouna/code/portfolio/components/Admin/ItemForm/ItemForm.tsx"],"names":["React","CubeSpinner","FontAwesomeIcon","icons","css","require","initialForm","title","id","elemType","type","placeholder","value","description","languages","options","selected","TypeScript","JavaScript","Cpp","NextJS","multiple","link","github","video_src","gif_src","desktop","Yes","No","mobile","ItemForm","show","close","add","sending","form","setForm","useState","console","log","optionClickHandler","name","updatedForm","changeHandler","event","target","addHandler","newItem","language","githubLink","itemFormStyles","join","backdropStyles","FormBackdrop","Loading","FormCloseButton","faTimes","map","element","FormAddButton","FormInput","memo","item","change","clickOption","content","undefined","e","Select","option","Option","FormInputContainer","FormInputTitle"],"mappings":";;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAIA,SAASC,WAAT,QAA4B,0BAA5B;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,KAAT,QAAsB,sBAAtB;;AAEA,MAAMC,GAAG,GAAGC,OAAO,CAAC,uBAAD,CAAnB;;AAcA,MAAMC,WAAkB,GAAG;AACvBC,EAAAA,KAAK,EAAE;AACHC,IAAAA,EAAE,EAAE,OADD;AAEHC,IAAAA,QAAQ,EAAE,OAFP;AAGHC,IAAAA,IAAI,EAAE,MAHH;AAIHC,IAAAA,WAAW,EAAE,OAJV;AAKHN,IAAAA,OAAO,EAAE,IALN;AAMHO,IAAAA,KAAK,EAAE;AANJ,GADgB;AASvBC,EAAAA,WAAW,EAAE;AACTL,IAAAA,EAAE,EAAE,aADK;AAETC,IAAAA,QAAQ,EAAE,UAFD;AAGTC,IAAAA,IAAI,EAAE,MAHG;AAITC,IAAAA,WAAW,EAAE,aAJJ;AAKTN,IAAAA,OAAO,EAAE,IALA;AAMTO,IAAAA,KAAK,EAAE;AANE,GATU;AAiBvBE,EAAAA,SAAS,EAAE;AACPN,IAAAA,EAAE,EAAE,WADG;AAEPC,IAAAA,QAAQ,EAAE,QAFH;AAGPM,IAAAA,OAAO,EAAE;AACLf,MAAAA,KAAK,EAAE;AACHgB,QAAAA,QAAQ,EAAE;AADP,OADF;AAILC,MAAAA,UAAU,EAAE;AACRD,QAAAA,QAAQ,EAAE;AADF,OAJP;AAOLE,MAAAA,UAAU,EAAE;AACRF,QAAAA,QAAQ,EAAE;AADF,OAPP;AAULG,MAAAA,GAAG,EAAE;AACDH,QAAAA,QAAQ,EAAE;AADT,OAVA;AAaLI,MAAAA,MAAM,EAAE;AACJJ,QAAAA,QAAQ,EAAE;AADN;AAbH,KAHF;AAoBPX,IAAAA,OAAO,EAAE,IApBF;AAqBPgB,IAAAA,QAAQ,EAAE;AArBH,GAjBY;AAwCvBC,EAAAA,IAAI,EAAE;AACFd,IAAAA,EAAE,EAAE,MADF;AAEFC,IAAAA,QAAQ,EAAE,OAFR;AAGFC,IAAAA,IAAI,EAAE,MAHJ;AAIFC,IAAAA,WAAW,EAAE,aAJX;AAKFN,IAAAA,OAAO,EAAE,IALP;AAMFO,IAAAA,KAAK,EAAE;AANL,GAxCiB;AAgDvBW,EAAAA,MAAM,EAAE;AACJf,IAAAA,EAAE,EAAE,QADA;AAEJC,IAAAA,QAAQ,EAAE,OAFN;AAGJC,IAAAA,IAAI,EAAE,MAHF;AAIJC,IAAAA,WAAW,EAAE,aAJT;AAKJN,IAAAA,OAAO,EAAE,IALL;AAMJO,IAAAA,KAAK,EAAE;AANH,GAhDe;AAwDvBY,EAAAA,SAAS,EAAE;AACPhB,IAAAA,EAAE,EAAE,WADG;AAEPC,IAAAA,QAAQ,EAAE,OAFH;AAGPC,IAAAA,IAAI,EAAE,MAHC;AAIPC,IAAAA,WAAW,EAAE,YAJN;AAKPN,IAAAA,OAAO,EAAE,IALF;AAMPO,IAAAA,KAAK,EAAE;AANA,GAxDY;AAgEvBa,EAAAA,OAAO,EAAE;AACLjB,IAAAA,EAAE,EAAE,SADC;AAELC,IAAAA,QAAQ,EAAE,OAFL;AAGLC,IAAAA,IAAI,EAAE,MAHD;AAILC,IAAAA,WAAW,EAAE,UAJR;AAKLN,IAAAA,OAAO,EAAE,IALJ;AAMLO,IAAAA,KAAK,EAAE;AANF,GAhEc;AAwEvBc,EAAAA,OAAO,EAAE;AACLlB,IAAAA,EAAE,EAAE,SADC;AAELC,IAAAA,QAAQ,EAAE,QAFL;AAGLM,IAAAA,OAAO,EAAG;AACNY,MAAAA,GAAG,EAAE;AACDX,QAAAA,QAAQ,EAAE;AADT,OADC;AAINY,MAAAA,EAAE,EAAE;AACAZ,QAAAA,QAAQ,EAAE;AADV;AAJE,KAHL;AAWLX,IAAAA,OAAO,EAAE;AAXJ,GAxEc;AAqFvBwB,EAAAA,MAAM,EAAE;AACJrB,IAAAA,EAAE,EAAE,QADA;AAEJC,IAAAA,QAAQ,EAAE,QAFN;AAGJM,IAAAA,OAAO,EAAG;AACNY,MAAAA,GAAG,EAAE;AACDX,QAAAA,QAAQ,EAAE;AADT,OADC;AAINY,MAAAA,EAAE,EAAE;AACAZ,QAAAA,QAAQ,EAAE;AADV;AAJE,KAHN;AAWJX,IAAAA,OAAO,EAAE;AAXL;AArFe,CAA3B;;AA2GA,MAAMyB,QAA4C,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,KAAR;AAAeC,EAAAA,GAAf;AAAoBC,EAAAA;AAApB,CAAD,KAAgD;AACjG,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBpC,KAAK,CAACqC,QAAN,CAAsB/B,WAAtB,CAAxB;AAEAgC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAI,CAACrB,SAAL,CAAeC,OAA3B;;AAEA,QAAMyB,kBAAkB,GAAG,CAAChC,EAAD,EAAaiC,IAAb,KAA8B;AACrD,UAAMC,WAAkB,qBACjBP,IADiB;AAEpB,OAAC3B,EAAD,qBACO2B,IAAI,CAAC3B,EAAD,CADX;AAEIO,QAAAA,OAAO,oBACAoB,IAAI,CAAC3B,EAAD,CAAJ,CAASO,OADT;AAEH,WAAC0B,IAAD,qBACON,IAAI,CAAC3B,EAAD,CAAJ,CAASO,OAAT,CAAiB0B,IAAjB,CADP;AAEIzB,YAAAA,QAAQ,EAAE,CAACmB,IAAI,CAAC3B,EAAD,CAAJ,CAASO,OAAT,CAAiB0B,IAAjB,EAAuBzB;AAFtC;AAFG;AAFX;AAFoB,MAAxB;;AAaAoB,IAAAA,OAAO,CAACM,WAAD,CAAP;AACH,GAfD;;AAiBA,QAAMC,aAAa,GAAG,CAACnC,EAAD,EAAaoC,KAAb,KAAsG;AACxH,QAAIF,WAAkB,qBAAQP,IAAR,CAAtB;;AACAO,IAAAA,WAAW,qBACJP,IADI;AAEP,OAAC3B,EAAD,qBACO2B,IAAI,CAAC3B,EAAD,CADX;AAEII,QAAAA,KAAK,EAAEgC,KAAK,CAACC,MAAN,CAAajC;AAFxB;AAFO,MAAX;AAOAwB,IAAAA,OAAO,CAACM,WAAD,CAAP;AACH,GAVD;;AAYA,QAAMI,UAAU,GAAG,MAAM;AACrB,UAAMC,OAAuB,GAAG;AAC5BxC,MAAAA,KAAK,EAAE4B,IAAI,CAAC5B,KAAL,CAAWK,KADU;AAE5BoC,MAAAA,QAAQ,EAAE,CAAC,GAAGb,IAAI,CAACrB,SAAL,CAAeE,QAAnB,CAFkB;AAG5BH,MAAAA,WAAW,EAAEsB,IAAI,CAACtB,WAAL,CAAiBD,KAHF;AAI5BU,MAAAA,IAAI,EAAEa,IAAI,CAACb,IAAL,CAAUV,KAJY;AAK5BqC,MAAAA,UAAU,EAAEd,IAAI,CAACZ,MAAL,CAAYX,KALI;AAM5BY,MAAAA,SAAS,EAAEW,IAAI,CAACX,SAAL,CAAeZ,KANE;AAO5Ba,MAAAA,OAAO,EAAEU,IAAI,CAACV,OAAL,CAAab,KAPM;AAQ5Bc,MAAAA,OAAO,EAAES,IAAI,CAACT,OAAL,CAAad,KAAb,KAAuB,KARJ;AAS5BiB,MAAAA,MAAM,EAAEM,IAAI,CAACN,MAAL,CAAYjB,KAAZ,KAAsB;AATF,KAAhC;AAWAqB,IAAAA,GAAG,CAACc,OAAD,CAAH;AACH,GAbD;;AAeA,QAAMG,cAAc,GAAG,CACnB9C,GAAG,CAAC0B,QADe,EAEnBC,IAAI,IAAI3B,GAAG,CAAC2B,IAFO,EAGrBoB,IAHqB,CAGhB,GAHgB,CAAvB;AAKA,QAAMC,cAAc,GAAG,CACnBhD,GAAG,CAACiD,YADe,EAEnBtB,IAAI,IAAI3B,GAAG,CAAC2B,IAFO,EAGrBoB,IAHqB,CAGhB,GAHgB,CAAvB;AAKA,SACI,4BACI;AAAM,IAAA,SAAS,EAAED;AAAjB,KACMhB,OAAO,IACL;AAAK,IAAA,SAAS,EAAE9B,GAAG,CAACkD;AAApB,KACI,MAAC,WAAD,OADJ,CAFR,EAMI,MAAC,eAAD;AAAiB,IAAA,SAAS,EAAElD,GAAG,CAACmD,eAAhC;AAAiD,IAAA,IAAI,EAAEpD,KAAK,CAACqD,OAA7D;AAAsE,IAAA,OAAO,EAAExB;AAA/E,IANJ,EAOM,aAAYG,IAAZ,EAAkBsB,GAAlB,CAAuBC,OAAD,IAAqB;AACzC,WACI,MAAC,SAAD;AAAW,MAAA,GAAG,EAAEA,OAAhB;AAAyB,MAAA,IAAI,EAAEvB,IAAI,CAACuB,OAAD,CAAnC;AAA8C,MAAA,MAAM,EAAEf,aAAtD;AAAqE,MAAA,WAAW,EAAEH;AAAlF,MADJ;AAGH,GAJC,CAPN,EAYI;AAAK,IAAA,SAAS,EAAEpC,GAAG,CAACuD,aAApB;AAAmC,IAAA,OAAO,EAAEb;AAA5C,KACI,uBADJ,CAZJ,CADJ,EAiBI;AAAK,IAAA,SAAS,EAAEM;AAAhB,IAjBJ,CADJ;AAqBH,CAhFD;;AAwFA,MAAMQ,SAA8C,GAAG5D,KAAK,CAAC6D,IAAN,CAAY,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,MAAR;AAAgBC,EAAAA;AAAhB,CAAD,KAAgD;AAC/G,MAAIC,OAAO,GAAGC,SAAd;;AAEA,UAAQJ,IAAI,CAACrD,QAAb;AACI,SAAK,OAAL;AACIwD,MAAAA,OAAO,GACH;AAAO,QAAA,KAAK,EAAEH,IAAI,CAAClD,KAAnB;AACI,QAAA,WAAW,EAAEkD,IAAI,CAACnD,WADtB;AAEI,QAAA,QAAQ,EAAGwD,CAAD,IAAOJ,MAAM,CAACD,IAAI,CAACtD,EAAN,EAAU2D,CAAV,CAF3B;AAGI,QAAA,SAAS,EAAE/D,GAAG,CAACwD;AAHnB,QADJ;AAMA;;AAEJ,SAAK,UAAL;AACIK,MAAAA,OAAO,GACH;AAAU,QAAA,KAAK,EAAEH,IAAI,CAAClD,KAAtB;AACI,QAAA,QAAQ,EAAGuD,CAAD,IAAOJ,MAAM,CAACD,IAAI,CAACtD,EAAN,EAAU2D,CAAV,CAD3B;AAEI,QAAA,WAAW,EAAEL,IAAI,CAACnD,WAFtB;AAGI,QAAA,SAAS,EAAEP,GAAG,CAACwD,SAHnB;AAII,QAAA,IAAI,EAAE;AAJV,QADJ;AAOA;;AAEJ,SAAK,QAAL;AACIK,MAAAA,OAAO,GACH;AAAK,QAAA,SAAS,EAAE7D,GAAG,CAACgE;AAApB,SACM,aAAYN,IAAI,CAAC/C,OAAjB,EAA0B0C,GAA1B,CAA+BY,MAAD,IAAiB;AAC7C/B,QAAAA,OAAO,CAACC,GAAR,CAAY8B,MAAM,CAACrD,QAAnB;AACA,eACI;AAAM,UAAA,GAAG,EAAEqD,MAAM,CAAC5B,IAAlB;AACI,UAAA,SAAS,EAAE,CAACrC,GAAG,CAACkE,MAAL,EAAaD,MAAM,CAACrD,QAAP,IAAmBZ,GAAG,CAACY,QAApC,EAA8CmC,IAA9C,CAAmD,GAAnD,CADf;AAEI,UAAA,OAAO,EAAE,MAAMa,WAAW,CAACF,IAAI,CAACtD,EAAN,EAAU6D,MAAV;AAF9B,WAEkDA,MAFlD,CADJ;AAKH,OAPC,CADN,CADJ;AAYA;AAjCR;;AAoCA,SACI;AAAK,IAAA,SAAS,EAAEjE,GAAG,CAACmE;AAApB,KACI;AAAG,IAAA,SAAS,EAAEnE,GAAG,CAACoE;AAAlB,KAAmCV,IAAI,CAACtD,EAAxC,CADJ,EAEMyD,OAFN,CADJ;AAMH,CA7CsD,CAAvD;AA+CA,eAAenC,QAAf","sourcesContent":["import * as React from 'react'\r\n\r\nimport { Languages, IPortfolioContext, PortfolioContext, TPortfolioActionTypes } from '../../../context/portfolioContext'\r\nimport { IPortfolioItem } from '../../../interfaces/interfaces'\r\nimport { CubeSpinner } from '../../UI/Spinner/Spinner'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { icons } from '../../../icons/icons'\r\n\r\nconst css = require('./ItemForm.module.css')\r\n\r\ninterface IForm {\r\n    [title: string]: any\r\n    description: any\r\n    languages: any\r\n    link: any\r\n    github: any\r\n    video_src: any\r\n    gif_src: any\r\n    desktop: any\r\n    mobile: any\r\n}\r\n\r\nconst initialForm: IForm = {\r\n    title: {\r\n        id: 'title',\r\n        elemType: 'input',\r\n        type: 'text',\r\n        placeholder: 'title',\r\n        require: true,\r\n        value: '',\r\n    },\r\n    description: {\r\n        id: 'description',\r\n        elemType: 'textarea',\r\n        type: 'text',\r\n        placeholder: 'description',\r\n        require: true,\r\n        value: '',\r\n    },\r\n    languages: {\r\n        id: 'languages',\r\n        elemType: 'select',\r\n        options: {\r\n            React: {\r\n                selected: false,\r\n            },\r\n            TypeScript: {\r\n                selected: false,\r\n            },\r\n            JavaScript: {\r\n                selected: false,\r\n            },\r\n            Cpp: {\r\n                selected: false\r\n            },\r\n            NextJS: {\r\n                selected: false\r\n            }\r\n        },\r\n        require: true,\r\n        multiple: true\r\n    },\r\n    link: {\r\n        id: 'link',\r\n        elemType: 'input',\r\n        type: 'text',\r\n        placeholder: 'link to app',\r\n        require: true,\r\n        value: '',\r\n    },\r\n    github: {\r\n        id: 'github',\r\n        elemType: 'input',\r\n        type: 'text',\r\n        placeholder: 'github link',\r\n        require: true,\r\n        value: '',\r\n    },\r\n    video_src: {\r\n        id: 'video_src',\r\n        elemType: 'input',  \r\n        type: 'text',\r\n        placeholder: 'video link',\r\n        require: true,\r\n        value: '',\r\n    },\r\n    gif_src: {\r\n        id: 'gif_src',\r\n        elemType: 'input',\r\n        type: 'text',\r\n        placeholder: 'gif link',\r\n        require: true,\r\n        value: '',\r\n    },\r\n    desktop: {\r\n        id: 'desktop',\r\n        elemType: 'select',\r\n        options : {\r\n            Yes: {\r\n                selected: true,\r\n            },\r\n            No: {\r\n                selected: false\r\n            },\r\n        },        \r\n        require: true,\r\n    },\r\n    mobile: {   \r\n        id: 'mobile',\r\n        elemType: 'select',\r\n        options : {\r\n            Yes: {\r\n                selected: true,\r\n            },\r\n            No: {\r\n                selected: false\r\n            },\r\n        }, \r\n        require: true,\r\n    }\r\n}\r\n\r\ninterface IItemForm {\r\n    show: boolean\r\n    sending: boolean\r\n    close: () => void\r\n    add: (item: IPortfolioItem) => void\r\n}\r\n\r\nconst ItemForm: React.FunctionComponent<IItemForm> = ({ show, close, add, sending }): JSX.Element => {\r\n    const [form, setForm] = React.useState<IForm>(initialForm)\r\n\r\n    console.log(form.languages.options)\r\n\r\n    const optionClickHandler = (id: string, name: string) => {\r\n        const updatedForm: IForm = {\r\n            ...form,\r\n            [id]: {\r\n                ...form[id],\r\n                options: {\r\n                    ...form[id].options,\r\n                    [name]: {\r\n                        ...form[id].options[name],\r\n                        selected: !form[id].options[name].selected,\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        setForm(updatedForm)\r\n    }\r\n\r\n    const changeHandler = (id: string, event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\r\n        let updatedForm: IForm = { ...form }\r\n        updatedForm = {\r\n            ...form,\r\n            [id]: {\r\n                ...form[id],\r\n                value: event.target.value\r\n            }\r\n        }\r\n        setForm(updatedForm)\r\n    }\r\n\r\n    const addHandler = () => {\r\n        const newItem: IPortfolioItem = {\r\n            title: form.title.value,\r\n            language: [...form.languages.selected],\r\n            description: form.description.value,\r\n            link: form.link.value,\r\n            githubLink: form.github.value,\r\n            video_src: form.video_src.value,\r\n            gif_src: form.gif_src.value,\r\n            desktop: form.desktop.value === 'Yes',\r\n            mobile: form.mobile.value === 'Yes,'\r\n        }\r\n        add(newItem)\r\n    }\r\n    \r\n    const itemFormStyles = [\r\n        css.ItemForm,\r\n        show && css.show\r\n    ].join(' ')\r\n\r\n    const backdropStyles = [\r\n        css.FormBackdrop,\r\n        show && css.show\r\n    ].join(' ')\r\n\r\n    return (\r\n        <>\r\n            <form className={itemFormStyles}>\r\n                { sending && \r\n                    <div className={css.Loading}>\r\n                        <CubeSpinner />\r\n                    </div>\r\n                }\r\n                <FontAwesomeIcon className={css.FormCloseButton} icon={icons.faTimes} onClick={close} />\r\n                { Object.keys(form).map((element: string) => {\r\n                    return (\r\n                        <FormInput key={element} item={form[element]} change={changeHandler} clickOption={optionClickHandler} />\r\n                    )\r\n                })}\r\n                <div className={css.FormAddButton} onClick={addHandler}>\r\n                    <p>add</p>\r\n                </div>\r\n            </form>\r\n            <div className={backdropStyles}></div>\r\n        </>\r\n    )\r\n}\r\n\r\ninterface IFormInput {\r\n    item: any\r\n    change: (id: string, e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => void\r\n    clickOption: (id: string, name: string) => void\r\n}\r\n\r\nconst FormInput: React.FunctionComponent<IFormInput> = React.memo( ({ item, change, clickOption }): JSX.Element => {\r\n    let content = undefined\r\n\r\n    switch (item.elemType) {\r\n        case 'input':\r\n            content = (\r\n                <input value={item.value} \r\n                    placeholder={item.placeholder} \r\n                    onChange={(e) => change(item.id, e)}\r\n                    className={css.FormInput} />\r\n            )\r\n            break;\r\n\r\n        case 'textarea':\r\n            content = (\r\n                <textarea value={item.value}\r\n                    onChange={(e) => change(item.id, e)}\r\n                    placeholder={item.placeholder} \r\n                    className={css.FormInput}\r\n                    rows={5} />\r\n            )\r\n            break;\r\n            \r\n        case 'select':\r\n            content = (\r\n                <div className={css.Select}>\r\n                    { Object.keys(item.options).map((option: any) => {\r\n                        console.log(option.selected)\r\n                        return (\r\n                            <span key={option.name} \r\n                                className={[css.Option, option.selected && css.selected].join(' ')} \r\n                                onClick={() => clickOption(item.id, option)}>{option}</span>\r\n                        )\r\n                    })}\r\n                </div>\r\n            )\r\n            break;\r\n    }\r\n\r\n    return (\r\n        <div className={css.FormInputContainer}>\r\n            <p className={css.FormInputTitle}>{item.id}</p>\r\n            { content }\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default ItemForm"]},"metadata":{},"sourceType":"module"}