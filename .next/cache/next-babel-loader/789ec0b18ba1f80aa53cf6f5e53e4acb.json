{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport { CubeSpinner } from '../../UI/Spinner/Spinner';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { icons } from '../../../icons/icons';\nimport { initialForm } from '../../../form/form';\n\nconst css = require('./ItemForm.module.css');\n\nconst ItemForm = ({\n  show,\n  sending,\n  item,\n  close,\n  add,\n  type\n}) => {\n  const [form, setForm] = React.useState(initialForm);\n  React.useEffect(() => {\n    if (item) {\n      // update each field manually cus we bad\n      const updatedForm = _objectSpread({}, form, {\n        title: _objectSpread({}, form.title, {\n          value: item.title\n        }),\n        description: _objectSpread({}, form.description, {\n          value: item.description\n        }),\n        language: _objectSpread({}, form.language, {\n          options: {\n            React: {\n              selected: item.language.includes('React')\n            },\n            TypeScript: {\n              selected: item.language.includes('TypeScript')\n            },\n            JavaScript: {\n              selected: item.language.includes('JavaScript')\n            },\n            Cpp: {\n              selected: item.language.includes('Cpp')\n            },\n            NextJS: {\n              selected: item.language.includes('NextJS')\n            }\n          }\n        }),\n        link: _objectSpread({}, form.link, {\n          value: item.link\n        }),\n        github: _objectSpread({}, form.github, {\n          value: item.githubLink\n        }),\n        video_src: _objectSpread({}, form.video_src, {\n          value: item.video_src\n        }),\n        gif_src: _objectSpread({}, form.gif_src, {\n          value: item.gif_src\n        }),\n        desktop: _objectSpread({}, form.desktop, {\n          options: {\n            Yes: {\n              selected: item.desktop\n            },\n            no: {\n              selected: !item.desktop\n            }\n          }\n        }),\n        mobile: _objectSpread({}, form.mobile, {\n          options: {\n            Yes: {\n              selected: item.mobile\n            },\n            No: {\n              selected: !item.mobile\n            }\n          }\n        })\n      });\n\n      setForm(updatedForm);\n    }\n  }, [item]);\n\n  const optionClickHandler = (id, name) => {\n    let updatedForm = _objectSpread({}, form);\n\n    if (id === 'languages') {\n      updatedForm = _objectSpread({}, form, {\n        [id]: _objectSpread({}, form[id], {\n          options: _objectSpread({}, form[id].options, {\n            [name]: _objectSpread({}, form[id].options[name], {\n              selected: !form[id].options[name].selected\n            })\n          })\n        })\n      });\n    } else {\n      updatedForm = _objectSpread({}, form, {\n        [id]: _objectSpread({}, form[id], {\n          options: {\n            Yes: {\n              selected: name === 'Yes'\n            },\n            No: {\n              selected: name === 'No'\n            }\n          }\n        })\n      });\n    }\n\n    setForm(updatedForm);\n  };\n\n  const changeHandler = (id, event) => {\n    let updatedForm = _objectSpread({}, form);\n\n    updatedForm = _objectSpread({}, form, {\n      [id]: _objectSpread({}, form[id], {\n        value: event.target.value\n      })\n    });\n    setForm(updatedForm);\n  };\n\n  const addHandler = () => {\n    const selectedLanguages = _Object$keys(form.languages.options).filter(option => form.languages.options[option].selected);\n\n    const newItem = {\n      title: form.title.value,\n      language: selectedLanguages,\n      description: form.description.value,\n      link: form.link.value,\n      githubLink: form.github.value,\n      video_src: form.video_src.value,\n      gif_src: form.gif_src.value,\n      desktop: form.desktop.options.Yes.selected,\n      mobile: form.mobile.options.Yes.selected\n    };\n    add(newItem);\n  };\n\n  const itemFormStyles = [css.ItemForm, show && css.show].join(' ');\n  const backdropStyles = [css.FormBackdrop, show && css.show].join(' ');\n  return __jsx(React.Fragment, null, __jsx(\"form\", {\n    className: itemFormStyles\n  }, sending && __jsx(\"div\", {\n    className: css.Loading\n  }, __jsx(CubeSpinner, null)), __jsx(FontAwesomeIcon, {\n    className: css.FormCloseButton,\n    icon: icons.faTimes,\n    onClick: close\n  }), _Object$keys(form).map(element => {\n    return __jsx(FormInput, {\n      key: element,\n      item: form[element],\n      change: changeHandler,\n      clickOption: optionClickHandler\n    });\n  }), __jsx(\"div\", {\n    className: css.FormAddButton,\n    onClick: addHandler\n  }, __jsx(\"p\", null, type))), __jsx(\"div\", {\n    className: backdropStyles\n  }));\n};\n\nconst FormInput = React.memo(({\n  item,\n  change,\n  clickOption\n}) => {\n  let content = undefined;\n\n  switch (item.elemType) {\n    case 'input':\n      content = __jsx(\"input\", {\n        value: item.value,\n        placeholder: item.placeholder,\n        onChange: e => change(item.id, e),\n        className: css.FormInput\n      });\n      break;\n\n    case 'textarea':\n      content = __jsx(\"textarea\", {\n        value: item.value,\n        onChange: e => change(item.id, e),\n        placeholder: item.placeholder,\n        className: css.FormInput,\n        rows: 5\n      });\n      break;\n\n    case 'select':\n      content = __jsx(\"div\", {\n        className: css.Select\n      }, _Object$keys(item.options).map(option => {\n        const selected = item.options[option].selected;\n        return __jsx(\"div\", {\n          key: item.id + option,\n          className: [css.Option, selected && css.selected].join(' '),\n          onClick: () => clickOption(item.id, option)\n        }, option);\n      }));\n      break;\n  }\n\n  return __jsx(\"div\", {\n    className: css.FormInputContainer\n  }, __jsx(\"p\", {\n    className: css.FormInputTitle\n  }, item.id), content);\n});\nexport default ItemForm;","map":{"version":3,"sources":["C:/Users/jouna/code/portfolio/components/Admin/ItemForm/ItemForm.tsx"],"names":["React","CubeSpinner","FontAwesomeIcon","icons","initialForm","css","require","ItemForm","show","sending","item","close","add","type","form","setForm","useState","useEffect","updatedForm","title","value","description","language","options","selected","includes","TypeScript","JavaScript","Cpp","NextJS","link","github","githubLink","video_src","gif_src","desktop","Yes","no","mobile","No","optionClickHandler","id","name","changeHandler","event","target","addHandler","selectedLanguages","languages","filter","option","newItem","itemFormStyles","join","backdropStyles","FormBackdrop","Loading","FormCloseButton","faTimes","map","element","FormAddButton","FormInput","memo","change","clickOption","content","undefined","elemType","placeholder","e","Select","Option","FormInputContainer","FormInputTitle"],"mappings":"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","sourcesContent":["import * as React from 'react'\r\n\r\nimport { IPortfolioItem } from '../../../interfaces/interfaces'\r\nimport { CubeSpinner } from '../../UI/Spinner/Spinner'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { icons } from '../../../icons/icons'\r\nimport { IForm, initialForm } from '../../../form/form'\r\n\r\nconst css = require('./ItemForm.module.css')\r\n\r\ninterface IItemForm {\r\n    show: boolean\r\n    sending: boolean\r\n    item?: IPortfolioItem\r\n    type: string\r\n    close(): void\r\n    add(item: IPortfolioItem): void\r\n}\r\n\r\nconst ItemForm: React.FunctionComponent<IItemForm> = ({ show, sending, item, close, add, type }): JSX.Element => {\r\n    const [form, setForm] = React.useState<IForm>(initialForm)\r\n\r\n    React.useEffect(() => {\r\n        if (item) {\r\n            // update each field manually cus we bad\r\n\r\n            const updatedForm: IForm = {\r\n                ...form,\r\n                title: {\r\n                    ...form.title,\r\n                    value: item.title,\r\n                },\r\n                description: {\r\n                    ...form.description,\r\n                    value: item.description,\r\n                },\r\n                language: {\r\n                    ...form.language,\r\n                    options: {\r\n                        React: {\r\n                            selected: item.language.includes('React'),\r\n                        },\r\n                        TypeScript: {\r\n                            selected: item.language.includes('TypeScript'),\r\n                        },\r\n                        JavaScript: {\r\n                            selected: item.language.includes('JavaScript'),\r\n                        },\r\n                        Cpp: {\r\n                            selected: item.language.includes('Cpp'),\r\n                        },\r\n                        NextJS: {\r\n                            selected: item.language.includes('NextJS'),\r\n                        }\r\n                    },\r\n                },\r\n                link: {\r\n                    ...form.link,\r\n                    value: item.link,\r\n                },\r\n                github: {\r\n                    ...form.github,\r\n                    value: item.githubLink,\r\n                },\r\n                video_src: {\r\n                    ...form.video_src,\r\n                    value: item.video_src\r\n                },\r\n                gif_src: {\r\n                    ...form.gif_src,\r\n                    value: item.gif_src\r\n                },\r\n                desktop: {\r\n                    ...form.desktop,\r\n                    options: {\r\n                        Yes: {\r\n                            selected: item.desktop\r\n                        },\r\n                        no: {\r\n                            selected: !item.desktop\r\n                        }\r\n                    }\r\n                },\r\n                mobile: {\r\n                    ...form.mobile,\r\n                    options: {\r\n                        Yes: {\r\n                            selected: item.mobile\r\n                        },\r\n                        No: {\r\n                            selected: !item.mobile\r\n                        }\r\n                    }\r\n                }\r\n            }    \r\n            setForm(updatedForm)     \r\n        }   \r\n    }, [item])\r\n\r\n    const optionClickHandler = (id: string, name: string) => {\r\n        let updatedForm: IForm = { ...form }\r\n        if (id === 'languages') {\r\n            updatedForm = {\r\n                ...form,\r\n                [id]: {\r\n                    ...form[id],\r\n                    options: {\r\n                        ...form[id].options,\r\n                        [name]: {\r\n                            ...form[id].options[name],\r\n                            selected: !form[id].options[name].selected,\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            updatedForm = {\r\n                ...form,\r\n                [id]: {\r\n                    ...form[id],\r\n                    options: {\r\n                        Yes: {\r\n                            selected: name === 'Yes',\r\n                        },\r\n                        No: {\r\n                            selected: name === 'No',\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        setForm(updatedForm)\r\n    }\r\n\r\n    const changeHandler = (id: string, event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\r\n        let updatedForm: IForm = { ...form }\r\n        updatedForm = {\r\n            ...form,\r\n            [id]: {\r\n                ...form[id],\r\n                value: event.target.value\r\n            }\r\n        }\r\n        setForm(updatedForm)\r\n    }\r\n\r\n    const addHandler = () => {\r\n        const selectedLanguages = Object.keys(form.languages.options).filter(option => form.languages.options[option].selected)\r\n\r\n        const newItem: IPortfolioItem = {\r\n            title: form.title.value,\r\n            language: selectedLanguages,\r\n            description: form.description.value,\r\n            link: form.link.value,\r\n            githubLink: form.github.value,\r\n            video_src: form.video_src.value,\r\n            gif_src: form.gif_src.value,\r\n            desktop: form.desktop.options.Yes.selected,\r\n            mobile: form.mobile.options.Yes.selected,\r\n        }\r\n        add(newItem)\r\n    }\r\n    \r\n    const itemFormStyles = [\r\n        css.ItemForm,\r\n        show && css.show\r\n    ].join(' ')\r\n\r\n    const backdropStyles = [\r\n        css.FormBackdrop,\r\n        show && css.show\r\n    ].join(' ')\r\n\r\n    return (\r\n        <>\r\n            <form className={itemFormStyles}>\r\n                { sending && \r\n                    <div className={css.Loading}>\r\n                        <CubeSpinner />\r\n                    </div>\r\n                }\r\n                <FontAwesomeIcon className={css.FormCloseButton} icon={icons.faTimes} onClick={close} />\r\n                { Object.keys(form).map((element: string) => {\r\n                    return (\r\n                        <FormInput key={element} item={form[element]} change={changeHandler} clickOption={optionClickHandler} />\r\n                    )\r\n                })}\r\n                <div className={css.FormAddButton} onClick={addHandler}>\r\n                    <p>{type}</p>\r\n                </div>\r\n            </form>\r\n            <div className={backdropStyles}></div>\r\n        </>\r\n    )\r\n}\r\n\r\ninterface IFormInput {\r\n    item: any\r\n    change: (id: string, e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => void\r\n    clickOption: (id: string, name: string) => void\r\n}\r\n\r\nconst FormInput: React.FunctionComponent<IFormInput> = React.memo( ({ item, change, clickOption }): JSX.Element => {\r\n    let content = undefined\r\n\r\n    switch (item.elemType) {\r\n        case 'input':\r\n            content = (\r\n                <input value={item.value} \r\n                    placeholder={item.placeholder} \r\n                    onChange={(e) => change(item.id, e)}\r\n                    className={css.FormInput} />\r\n            )\r\n            break;\r\n\r\n        case 'textarea':\r\n            content = (\r\n                <textarea value={item.value}\r\n                    onChange={(e) => change(item.id, e)}\r\n                    placeholder={item.placeholder} \r\n                    className={css.FormInput}\r\n                    rows={5} />\r\n            )\r\n            break;\r\n            \r\n        case 'select':\r\n            content = (\r\n                <div className={css.Select}>\r\n                    { Object.keys(item.options).map((option: any) => {\r\n                        const selected: boolean = item.options[option].selected\r\n                        return (\r\n                            <div key={item.id + option} \r\n                                className={[css.Option, selected && css.selected].join(' ')} \r\n                                onClick={() => clickOption(item.id, option)}>{option}</div>\r\n                        )\r\n                    })}\r\n                </div>\r\n            )\r\n            break;\r\n    }\r\n\r\n    return (\r\n        <div className={css.FormInputContainer}>\r\n            <p className={css.FormInputTitle}>{item.id}</p>\r\n            { content }\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default ItemForm"]},"metadata":{},"sourceType":"module"}