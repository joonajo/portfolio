{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport { Languages } from '../../../context/portfolioContext';\nimport { CubeSpinner } from '../../UI/Spinner/Spinner';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { icons } from '../../../icons/icons';\n\nvar css = require('./NewItemForm.module.css');\n\nvar initialForm = {\n  title: {\n    id: 'title',\n    elemType: 'input',\n    type: 'text',\n    placeholder: 'title',\n    require: true,\n    value: ''\n  },\n  description: {\n    id: 'description',\n    elemType: 'textarea',\n    type: 'text',\n    placeholder: 'description',\n    require: true,\n    value: ''\n  },\n  languages: {\n    id: 'languages',\n    elemType: 'select',\n    options: _toConsumableArray(_Object$keys(Languages)),\n    selected: [],\n    require: true,\n    multiple: true\n  },\n  link: {\n    id: 'link',\n    elemType: 'input',\n    type: 'text',\n    placeholder: 'link to app',\n    require: true,\n    value: ''\n  },\n  github: {\n    id: 'github',\n    elemType: 'input',\n    type: 'text',\n    placeholder: 'github link',\n    require: true,\n    value: ''\n  },\n  video_src: {\n    id: 'video_src',\n    elemType: 'input',\n    type: 'text',\n    placeholder: 'video link',\n    require: true,\n    value: ''\n  },\n  gif_src: {\n    id: 'gif_src',\n    elemType: 'input',\n    type: 'text',\n    placeholder: 'gif link',\n    require: true,\n    value: ''\n  },\n  desktop: {\n    id: 'desktop',\n    elemType: 'select',\n    options: ['Yes', 'No'],\n    require: true,\n    value: 'Yes',\n    multiple: false\n  },\n  mobile: {\n    id: 'mobile',\n    elemType: 'select',\n    options: ['Yes', 'No'],\n    require: true,\n    value: 'Yes',\n    multiple: false\n  }\n};\n\nvar NewItemForm = function NewItemForm(_ref) {\n  var show = _ref.show,\n      close = _ref.close,\n      add = _ref.add,\n      sending = _ref.sending;\n\n  var _React$useState = React.useState(initialForm),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      form = _React$useState2[0],\n      setForm = _React$useState2[1];\n\n  var changeHandler = function changeHandler(id, event) {\n    var updatedForm = _objectSpread({}, form);\n\n    if (id === 'languages') {\n      console.log(form[id].options);\n\n      var updatedSelectedOptions = _toConsumableArray(form[id].selected);\n\n      if (updatedSelectedOptions.includes(event.target.value)) updatedSelectedOptions.filter(function (option) {\n        return option !== event.target.value;\n      });else updatedSelectedOptions.push(event.target.value);\n    } else {\n      updatedForm = _objectSpread({}, form, _defineProperty({}, id, _objectSpread({}, form[id], {\n        value: event.target.value\n      })));\n    }\n\n    setForm(updatedForm);\n  };\n\n  var addHandler = function addHandler() {\n    var newItem = {\n      title: form.title.value,\n      language: [Languages.React, Languages.TypeScript],\n      description: form.description.value,\n      link: form.link.value,\n      githubLink: form.github.value,\n      video_src: form.video_src.value,\n      gif_src: form.gif_src.value,\n      desktop: form.desktop.value === 'Yes',\n      mobile: form.mobile.value === 'Yes,'\n    };\n    add(newItem);\n  };\n\n  var itemFormStyles = [css.ItemForm, show && css.show].join(' ');\n  var backdropStyles = [css.FormBackdrop, show && css.show].join(' ');\n  return __jsx(React.Fragment, null, __jsx(\"form\", {\n    className: itemFormStyles\n  }, sending && __jsx(\"div\", {\n    className: css.Loading\n  }, __jsx(CubeSpinner, null)), __jsx(FontAwesomeIcon, {\n    className: css.FormCloseButton,\n    icon: icons.faTimes,\n    onClick: close\n  }), _Object$keys(form).map(function (element) {\n    return __jsx(FormInput, {\n      key: element,\n      item: form[element],\n      change: changeHandler\n    });\n  }), __jsx(\"div\", {\n    className: css.FormAddButton,\n    onClick: addHandler\n  }, __jsx(\"p\", null, \"add\"))), __jsx(\"div\", {\n    className: backdropStyles\n  }));\n};\n\nvar FormInput = React.memo(function (_ref2) {\n  var item = _ref2.item,\n      change = _ref2.change;\n  var content = undefined;\n\n  switch (item.elemType) {\n    case 'input':\n      content = __jsx(\"input\", {\n        value: item.value,\n        placeholder: item.placeholder,\n        onChange: function onChange(e) {\n          return change(item.id, e);\n        },\n        className: css.FormInput\n      });\n      break;\n\n    case 'textarea':\n      content = __jsx(\"textarea\", {\n        value: item.value,\n        onChange: function onChange(e) {\n          return change(item.id, e);\n        },\n        placeholder: item.placeholder,\n        className: css.FormInput,\n        rows: 5\n      });\n      break;\n\n    case 'select':\n      content = __jsx(\"select\", {\n        className: css.FormSelect,\n        onChange: function onChange(e) {\n          return change(item.id, e);\n        },\n        id: item.id,\n        multiple: item.multiple\n      }, item.options.map(function (option) {\n        return __jsx(\"option\", {\n          key: item.id + option,\n          value: option,\n          className: css.SelectOption\n        }, option);\n      }));\n      break;\n  }\n\n  return __jsx(\"div\", {\n    className: css.FormInputContainer\n  }, __jsx(\"p\", null, item.id), content);\n});\nexport default NewItemForm;","map":{"version":3,"sources":["C:/Users/jouna/code/portfolio/components/Admin/NewItemForm/NewItemForm.tsx"],"names":["React","Languages","CubeSpinner","FontAwesomeIcon","icons","css","require","initialForm","title","id","elemType","type","placeholder","value","description","languages","options","selected","multiple","link","github","video_src","gif_src","desktop","mobile","NewItemForm","show","close","add","sending","useState","form","setForm","changeHandler","event","updatedForm","console","log","updatedSelectedOptions","includes","target","filter","option","push","addHandler","newItem","language","TypeScript","githubLink","itemFormStyles","ItemForm","join","backdropStyles","FormBackdrop","Loading","FormCloseButton","faTimes","map","element","FormAddButton","FormInput","memo","item","change","content","undefined","e","FormSelect","SelectOption","FormInputContainer"],"mappings":"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","sourcesContent":["import * as React from 'react'\r\n\r\nimport { Languages, IPortfolioContext, PortfolioContext, TPortfolioActionTypes } from '../../../context/portfolioContext'\r\nimport { IPortfolioItem } from '../../../interfaces/interfaces'\r\nimport { CubeSpinner } from '../../UI/Spinner/Spinner'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { icons } from '../../../icons/icons'\r\n\r\nconst css = require('./NewItemForm.module.css')\r\n\r\ninterface IForm {\r\n    [title: string]: any\r\n    description: any\r\n    languages: any\r\n    link: any\r\n    github: any\r\n    video_src: any\r\n    gif_src: any\r\n    desktop: any\r\n    mobile: any\r\n}\r\n\r\nconst initialForm: IForm = {\r\n    title: {\r\n        id: 'title',\r\n        elemType: 'input',\r\n        type: 'text',\r\n        placeholder: 'title',\r\n        require: true,\r\n        value: '',\r\n    },\r\n    description: {\r\n        id: 'description',\r\n        elemType: 'textarea',\r\n        type: 'text',\r\n        placeholder: 'description',\r\n        require: true,\r\n        value: '',\r\n    },\r\n    languages: {\r\n        id: 'languages',\r\n        elemType: 'select',\r\n        options: [...Object.keys(Languages)],\r\n        selected: [],\r\n        require: true,\r\n        multiple: true\r\n    },\r\n    link: {\r\n        id: 'link',\r\n        elemType: 'input',\r\n        type: 'text',\r\n        placeholder: 'link to app',\r\n        require: true,\r\n        value: '',\r\n    },\r\n    github: {\r\n        id: 'github',\r\n        elemType: 'input',\r\n        type: 'text',\r\n        placeholder: 'github link',\r\n        require: true,\r\n        value: '',\r\n    },\r\n    video_src: {\r\n        id: 'video_src',\r\n        elemType: 'input',  \r\n        type: 'text',\r\n        placeholder: 'video link',\r\n        require: true,\r\n        value: '',\r\n    },\r\n    gif_src: {\r\n        id: 'gif_src',\r\n        elemType: 'input',\r\n        type: 'text',\r\n        placeholder: 'gif link',\r\n        require: true,\r\n        value: '',\r\n    },\r\n    desktop: {\r\n        id: 'desktop',\r\n        elemType: 'select',\r\n        options : ['Yes', 'No'],\r\n        require: true,\r\n        value: 'Yes',\r\n        multiple: false\r\n    },\r\n    mobile: {   \r\n        id: 'mobile',\r\n        elemType: 'select',\r\n        options : ['Yes', 'No'],\r\n        require: true,\r\n        value: 'Yes',\r\n        multiple: false\r\n    }\r\n}\r\n\r\ninterface INewItemForm {\r\n    show: boolean\r\n    sending: boolean\r\n    close: () => void\r\n    add: (item: IPortfolioItem) => void\r\n}\r\n\r\nconst NewItemForm: React.FunctionComponent<INewItemForm> = ({ show, close, add, sending }): JSX.Element => {\r\n    const [form, setForm] = React.useState<IForm>(initialForm)\r\n\r\n    const changeHandler = (id: string, event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\r\n        let updatedForm: IForm = { ...form }\r\n        if (id === 'languages') {\r\n            console.log(form[id].options)\r\n            const updatedSelectedOptions: string[] = [...form[id].selected]\r\n            if (updatedSelectedOptions.includes(event.target.value)) updatedSelectedOptions.filter(option => option !== event.target.value)\r\n            else updatedSelectedOptions.push(event.target.value)\r\n        } else {\r\n            updatedForm = {\r\n                ...form,\r\n                [id]: {\r\n                    ...form[id],\r\n                    value: event.target.value\r\n                }\r\n            }\r\n        }\r\n        setForm(updatedForm)\r\n    }\r\n\r\n    const addHandler = () => {\r\n        const newItem: IPortfolioItem = {\r\n            title: form.title.value,\r\n            language: [Languages.React, Languages.TypeScript],\r\n            description: form.description.value,\r\n            link: form.link.value,\r\n            githubLink: form.github.value,\r\n            video_src: form.video_src.value,\r\n            gif_src: form.gif_src.value,\r\n            desktop: form.desktop.value === 'Yes',\r\n            mobile: form.mobile.value === 'Yes,'\r\n        }\r\n        add(newItem)\r\n    }\r\n    \r\n    const itemFormStyles = [\r\n        css.ItemForm,\r\n        show && css.show\r\n    ].join(' ')\r\n\r\n    const backdropStyles = [\r\n        css.FormBackdrop,\r\n        show && css.show\r\n    ].join(' ')\r\n\r\n    return (\r\n        <>\r\n            <form className={itemFormStyles}>\r\n                { sending && \r\n                    <div className={css.Loading}>\r\n                        <CubeSpinner />\r\n                    </div>\r\n                }\r\n                <FontAwesomeIcon className={css.FormCloseButton} icon={icons.faTimes} onClick={close} />\r\n                { Object.keys(form).map((element: string) => {\r\n                    return (\r\n                        <FormInput key={element} item={form[element]} change={changeHandler}  />\r\n                    )\r\n                })}\r\n                <div className={css.FormAddButton} onClick={addHandler}>\r\n                    <p>add</p>\r\n                </div>\r\n            </form>\r\n            <div className={backdropStyles}></div>\r\n        </>\r\n    )\r\n}\r\n\r\ninterface IFormInput {\r\n    item: any\r\n    change: (id: string, e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => void\r\n}\r\n\r\nconst FormInput: React.FunctionComponent<IFormInput> = React.memo( ({ item, change }): JSX.Element => {\r\n    let content = undefined\r\n\r\n    switch (item.elemType) {\r\n        case 'input':\r\n            content = (\r\n                <input value={item.value} \r\n                    placeholder={item.placeholder} \r\n                    onChange={(e) => change(item.id, e)}\r\n                    className={css.FormInput} />\r\n            )\r\n            break;\r\n\r\n        case 'textarea':\r\n            content = (\r\n                <textarea value={item.value}\r\n                    onChange={(e) => change(item.id, e)}\r\n                    placeholder={item.placeholder} \r\n                    className={css.FormInput}\r\n                    rows={5} />\r\n            )\r\n            break;\r\n            \r\n        case 'select':\r\n            content = (\r\n                <select className={css.FormSelect} onChange={(e) => change(item.id, e)} id={item.id} multiple={item.multiple}>\r\n                    {item.options.map((option: string) => {\r\n                        return (\r\n                            <option key={item.id + option} value={option} className={css.SelectOption}>{option}</option>\r\n                        )\r\n                    })}\r\n                </select>\r\n            )\r\n            break;\r\n    }\r\n\r\n    return (\r\n        <div className={css.FormInputContainer}>\r\n            <p>{item.id}</p>\r\n            { content }\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default NewItemForm"]},"metadata":{},"sourceType":"module"}