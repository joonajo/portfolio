{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { icons } from '../../icons/icons';\n\nconst css = require('./ExpandedVideo.module.css');\n\nconst ExpandedVideo = ({\n  video_src,\n  close\n}) => {\n  const [unmount, setUnmount] = React.useState(false);\n  React.useEffect(() => {\n    window.addEventListener('keydown', keyHandler, true);\n    return () => window.removeEventListener('keydown', keyHandler, true);\n  }, []);\n  React.useLayoutEffect(() => {\n    // Get original body overflow\n    const originalStyle = window.getComputedStyle(document.body).overflow; // Prevent scrolling on mount\n\n    document.body.style.overflow = 'hidden'; // Re-enable scrolling when component unmounts\n\n    return () => {\n      document.body.style.overflow = originalStyle;\n    };\n  }, []); // Empty array ensures effect is only run on mount and unmount\n\n  const keyHandler = React.useCallback(event => {\n    console.log(event.key);\n\n    switch (event.key) {\n      case 'Escape':\n        closeHandler();\n        break;\n\n      default:\n        break;\n    }\n  }, []);\n  const closeHandler = React.useCallback(() => {\n    setUnmount(true);\n    setTimeout(() => {\n      close();\n    }, 300);\n  }, [close]);\n  const classes = [css.Main, unmount ? css.unmount : css.mount].join(' ');\n  return __jsx(\"div\", {\n    className: classes\n  }, __jsx(\"div\", {\n    className: css.Backdrop,\n    onClick: closeHandler\n  }), __jsx(\"div\", {\n    className: css.VideoContainer\n  }, __jsx(\"video\", {\n    className: css.Video,\n    src: video_src,\n    controls: true,\n    muted: true,\n    autoPlay: true,\n    playsInline: true\n  })), __jsx(\"div\", {\n    className: css.CloseButton,\n    onClick: closeHandler\n  }, __jsx(FontAwesomeIcon, {\n    icon: icons.faTimes\n  })));\n};\n\nexport default ExpandedVideo;","map":{"version":3,"sources":["C:/Users/jouna/code/portfolio/components/ExpandedVideo/ExpandedVideo.tsx"],"names":["React","FontAwesomeIcon","icons","css","require","ExpandedVideo","video_src","close","unmount","setUnmount","useState","useEffect","window","addEventListener","keyHandler","removeEventListener","useLayoutEffect","originalStyle","getComputedStyle","document","body","overflow","style","useCallback","event","console","log","key","closeHandler","setTimeout","classes","Main","mount","join","Backdrop","VideoContainer","Video","CloseButton","faTimes"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,KAAT,QAAsB,mBAAtB;;AAEA,MAAMC,GAAG,GAAGC,OAAO,CAAC,4BAAD,CAAnB;;AAOA,MAAMC,aAAsD,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAD,KAAuC;AAClG,QAAK,CAACC,OAAD,EAAUC,UAAV,IAAwBT,KAAK,CAACU,QAAN,CAAe,KAAf,CAA7B;AAEAV,EAAAA,KAAK,CAACW,SAAN,CAAgB,MAAM;AAClBC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmCC,UAAnC,EAA+C,IAA/C;AAEA,WAAO,MAAMF,MAAM,CAACG,mBAAP,CAA2B,SAA3B,EAAsCD,UAAtC,EAAkD,IAAlD,CAAb;AACH,GAJD,EAIG,EAJH;AAMAd,EAAAA,KAAK,CAACgB,eAAN,CAAsB,MAAM;AACxB;AACA,UAAMC,aAAqB,GAAGL,MAAM,CAACM,gBAAP,CAAwBC,QAAQ,CAACC,IAAjC,EAAuCC,QAArE,CAFwB,CAGxB;;AACAF,IAAAA,QAAQ,CAACC,IAAT,CAAcE,KAAd,CAAoBD,QAApB,GAA+B,QAA/B,CAJwB,CAKxB;;AACA,WAAO,MAAM;AAAEF,MAAAA,QAAQ,CAACC,IAAT,CAAcE,KAAd,CAAoBD,QAApB,GAA+BJ,aAA/B;AAA8C,KAA7D;AACH,GAPD,EAOG,EAPH,EATkG,CAgB3F;;AAEP,QAAMH,UAAU,GAAGd,KAAK,CAACuB,WAAN,CAAmBC,KAAD,IAA0B;AAC3DC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,GAAlB;;AACA,YAAQH,KAAK,CAACG,GAAd;AACI,WAAK,QAAL;AACIC,QAAAA,YAAY;AACZ;;AAEJ;AACI;AANR;AAQH,GAVkB,EAUhB,EAVgB,CAAnB;AAYA,QAAMA,YAAY,GAAG5B,KAAK,CAACuB,WAAN,CAAkB,MAAM;AACzCd,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAoB,IAAAA,UAAU,CAAC,MAAM;AACbtB,MAAAA,KAAK;AACR,KAFS,EAEP,GAFO,CAAV;AAGH,GALoB,EAKlB,CAACA,KAAD,CALkB,CAArB;AAOA,QAAMuB,OAAO,GAAG,CACZ3B,GAAG,CAAC4B,IADQ,EAEZvB,OAAO,GAAGL,GAAG,CAACK,OAAP,GAAiBL,GAAG,CAAC6B,KAFhB,EAGdC,IAHc,CAGT,GAHS,CAAhB;AAKA,SACI;AAAK,IAAA,SAAS,EAAEH;AAAhB,KACI;AAAK,IAAA,SAAS,EAAE3B,GAAG,CAAC+B,QAApB;AAA8B,IAAA,OAAO,EAAEN;AAAvC,IADJ,EAEI;AAAK,IAAA,SAAS,EAAEzB,GAAG,CAACgC;AAApB,KACI;AAAO,IAAA,SAAS,EAAEhC,GAAG,CAACiC,KAAtB;AAA6B,IAAA,GAAG,EAAE9B,SAAlC;AAA6C,IAAA,QAAQ,MAArD;AAAsD,IAAA,KAAK,MAA3D;AAA4D,IAAA,QAAQ,MAApE;AAAqE,IAAA,WAAW;AAAhF,IADJ,CAFJ,EAKI;AAAK,IAAA,SAAS,EAAEH,GAAG,CAACkC,WAApB;AAAiC,IAAA,OAAO,EAAET;AAA1C,KACI,MAAC,eAAD;AAAiB,IAAA,IAAI,EAAE1B,KAAK,CAACoC;AAA7B,IADJ,CALJ,CADJ;AAWH,CArDD;;AAuDA,eAAejC,aAAf","sourcesContent":["import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { icons } from '../../icons/icons'\n\nconst css = require('./ExpandedVideo.module.css')\n\ninterface IExpandedVideo {\n    video_src: string\n    close: () => void\n}\n\nconst ExpandedVideo: React.FunctionComponent<IExpandedVideo> = ({ video_src, close }): JSX.Element => {\n    const[unmount, setUnmount] = React.useState(false)\n\n    React.useEffect(() => {\n        window.addEventListener('keydown', keyHandler, true)\n\n        return () => window.removeEventListener('keydown', keyHandler, true)\n    }, [])\n\n    React.useLayoutEffect(() => {\n        // Get original body overflow\n        const originalStyle: string = window.getComputedStyle(document.body).overflow!  \n        // Prevent scrolling on mount\n        document.body.style.overflow = 'hidden'\n        // Re-enable scrolling when component unmounts\n        return () => { document.body.style.overflow = originalStyle }\n    }, []) // Empty array ensures effect is only run on mount and unmount\n\n    const keyHandler = React.useCallback((event: KeyboardEvent) => {\n        console.log(event.key)\n        switch (event.key) {\n            case 'Escape':\n                closeHandler()\n                break;\n\n            default:\n                break;\n        }\n    }, [])\n\n    const closeHandler = React.useCallback(() => {\n        setUnmount(true)\n        setTimeout(() => {\n            close()\n        }, 300)\n    }, [close])\n\n    const classes = [\n        css.Main,\n        unmount ? css.unmount : css.mount,\n    ].join(' ')\n\n    return (\n        <div className={classes}>\n            <div className={css.Backdrop} onClick={closeHandler}></div>\n            <div className={css.VideoContainer}>\n                <video className={css.Video} src={video_src} controls muted autoPlay playsInline />\n            </div>\n            <div className={css.CloseButton} onClick={closeHandler}>\n                <FontAwesomeIcon icon={icons.faTimes} />\n            </div>\n        </div>\n    )\n}\n\nexport default ExpandedVideo"]},"metadata":{},"sourceType":"module"}