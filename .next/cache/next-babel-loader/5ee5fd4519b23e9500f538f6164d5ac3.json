{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport { Languages } from '../../../context/portfolioContext';\nimport { CubeSpinner } from '../../UI/Spinner/Spinner';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { icons } from '../../../icons/icons';\n\nvar css = require('./ItemForm.module.css');\n\nvar initialForm = {\n  title: {\n    id: 'title',\n    elemType: 'input',\n    type: 'text',\n    placeholder: 'title',\n    require: true,\n    value: ''\n  },\n  description: {\n    id: 'description',\n    elemType: 'textarea',\n    type: 'text',\n    placeholder: 'description',\n    require: true,\n    value: ''\n  },\n  languages: {\n    id: 'languages',\n    elemType: 'select',\n    options: _objectSpread({}, _Object$keys(Languages).map(function (language) {\n      return _defineProperty({}, language, {\n        selected: false\n      });\n    })),\n    selected: [],\n    require: true,\n    multiple: true\n  },\n  link: {\n    id: 'link',\n    elemType: 'input',\n    type: 'text',\n    placeholder: 'link to app',\n    require: true,\n    value: ''\n  },\n  github: {\n    id: 'github',\n    elemType: 'input',\n    type: 'text',\n    placeholder: 'github link',\n    require: true,\n    value: ''\n  },\n  video_src: {\n    id: 'video_src',\n    elemType: 'input',\n    type: 'text',\n    placeholder: 'video link',\n    require: true,\n    value: ''\n  },\n  gif_src: {\n    id: 'gif_src',\n    elemType: 'input',\n    type: 'text',\n    placeholder: 'gif link',\n    require: true,\n    value: ''\n  },\n  desktop: {\n    id: 'desktop',\n    elemType: 'select',\n    options: {\n      Yes: {\n        selected: true\n      },\n      No: {\n        selected: false\n      }\n    },\n    require: true\n  },\n  mobile: {\n    id: 'mobile',\n    elemType: 'select',\n    options: {\n      Yes: {\n        selected: true\n      },\n      No: {\n        selected: false\n      }\n    },\n    require: true\n  }\n};\n\nvar ItemForm = function ItemForm(_ref2) {\n  var show = _ref2.show,\n      close = _ref2.close,\n      add = _ref2.add,\n      sending = _ref2.sending;\n\n  var _React$useState = React.useState(initialForm),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      form = _React$useState2[0],\n      setForm = _React$useState2[1];\n\n  console.log(form.languages);\n\n  var optionClickHandler = function optionClickHandler(id, name) {\n    console.log(id, name);\n  };\n\n  var changeHandler = function changeHandler(id, event) {\n    console.log('sup');\n\n    var updatedForm = _objectSpread({}, form);\n\n    updatedForm = _objectSpread({}, form, _defineProperty({}, id, _objectSpread({}, form[id], {\n      value: event.target.value\n    })));\n    setForm(updatedForm);\n  };\n\n  var addHandler = function addHandler() {\n    var newItem = {\n      title: form.title.value,\n      language: _toConsumableArray(form.languages.selected),\n      description: form.description.value,\n      link: form.link.value,\n      githubLink: form.github.value,\n      video_src: form.video_src.value,\n      gif_src: form.gif_src.value,\n      desktop: form.desktop.value === 'Yes',\n      mobile: form.mobile.value === 'Yes,'\n    };\n    add(newItem);\n  };\n\n  var itemFormStyles = [css.ItemForm, show && css.show].join(' ');\n  var backdropStyles = [css.FormBackdrop, show && css.show].join(' ');\n  return __jsx(React.Fragment, null, __jsx(\"form\", {\n    className: itemFormStyles\n  }, sending && __jsx(\"div\", {\n    className: css.Loading\n  }, __jsx(CubeSpinner, null)), __jsx(FontAwesomeIcon, {\n    className: css.FormCloseButton,\n    icon: icons.faTimes,\n    onClick: close\n  }), _Object$keys(form).map(function (element) {\n    return __jsx(FormInput, {\n      key: element,\n      item: form[element],\n      change: changeHandler,\n      clickOption: optionClickHandler\n    });\n  }), __jsx(\"div\", {\n    className: css.FormAddButton,\n    onClick: addHandler\n  }, __jsx(\"p\", null, \"add\"))), __jsx(\"div\", {\n    className: backdropStyles\n  }));\n};\n\nvar FormInput = React.memo(function (_ref3) {\n  var item = _ref3.item,\n      change = _ref3.change,\n      clickOption = _ref3.clickOption;\n  var content = undefined;\n\n  switch (item.elemType) {\n    case 'input':\n      content = __jsx(\"input\", {\n        value: item.value,\n        placeholder: item.placeholder,\n        onChange: function onChange(e) {\n          return change(item.id, e);\n        },\n        className: css.FormInput\n      });\n      break;\n\n    case 'textarea':\n      content = __jsx(\"textarea\", {\n        value: item.value,\n        onChange: function onChange(e) {\n          return change(item.id, e);\n        },\n        placeholder: item.placeholder,\n        className: css.FormInput,\n        rows: 5\n      });\n      break;\n\n    case 'select':\n      content = __jsx(\"div\", {\n        className: css.Select\n      }, _Object$keys(item.options).map(function (option) {\n        console.log(option);\n        return __jsx(\"span\", {\n          key: option.name,\n          className: css.Option,\n          onClick: function onClick() {\n            return clickOption(item.id, option);\n          }\n        }, option);\n      }));\n      break;\n  }\n\n  return __jsx(\"div\", {\n    className: css.FormInputContainer\n  }, __jsx(\"p\", {\n    className: css.FormInputTitle\n  }, item.id), content);\n});\nexport default ItemForm;","map":{"version":3,"sources":["C:/Users/jouna/code/portfolio/components/Admin/ItemForm/ItemForm.tsx"],"names":["React","Languages","CubeSpinner","FontAwesomeIcon","icons","css","require","initialForm","title","id","elemType","type","placeholder","value","description","languages","options","map","language","selected","multiple","link","github","video_src","gif_src","desktop","Yes","No","mobile","ItemForm","show","close","add","sending","useState","form","setForm","console","log","optionClickHandler","name","changeHandler","event","updatedForm","target","addHandler","newItem","githubLink","itemFormStyles","join","backdropStyles","FormBackdrop","Loading","FormCloseButton","faTimes","element","FormAddButton","FormInput","memo","item","change","clickOption","content","undefined","e","Select","option","Option","FormInputContainer","FormInputTitle"],"mappings":"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","sourcesContent":["import * as React from 'react'\r\n\r\nimport { Languages, IPortfolioContext, PortfolioContext, TPortfolioActionTypes } from '../../../context/portfolioContext'\r\nimport { IPortfolioItem } from '../../../interfaces/interfaces'\r\nimport { CubeSpinner } from '../../UI/Spinner/Spinner'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { icons } from '../../../icons/icons'\r\n\r\nconst css = require('./ItemForm.module.css')\r\n\r\ninterface IForm {\r\n    [title: string]: any\r\n    description: any\r\n    languages: any\r\n    link: any\r\n    github: any\r\n    video_src: any\r\n    gif_src: any\r\n    desktop: any\r\n    mobile: any\r\n}\r\n\r\nconst initialForm: IForm = {\r\n    title: {\r\n        id: 'title',\r\n        elemType: 'input',\r\n        type: 'text',\r\n        placeholder: 'title',\r\n        require: true,\r\n        value: '',\r\n    },\r\n    description: {\r\n        id: 'description',\r\n        elemType: 'textarea',\r\n        type: 'text',\r\n        placeholder: 'description',\r\n        require: true,\r\n        value: '',\r\n    },\r\n    languages: {\r\n        id: 'languages',\r\n        elemType: 'select',\r\n        options: {...Object.keys(Languages).map(language => {\r\n            return {\r\n                [language]: {\r\n                    selected: false\r\n                }\r\n            }\r\n        })},\r\n        selected: [],\r\n        require: true,\r\n        multiple: true\r\n    },\r\n    link: {\r\n        id: 'link',\r\n        elemType: 'input',\r\n        type: 'text',\r\n        placeholder: 'link to app',\r\n        require: true,\r\n        value: '',\r\n    },\r\n    github: {\r\n        id: 'github',\r\n        elemType: 'input',\r\n        type: 'text',\r\n        placeholder: 'github link',\r\n        require: true,\r\n        value: '',\r\n    },\r\n    video_src: {\r\n        id: 'video_src',\r\n        elemType: 'input',  \r\n        type: 'text',\r\n        placeholder: 'video link',\r\n        require: true,\r\n        value: '',\r\n    },\r\n    gif_src: {\r\n        id: 'gif_src',\r\n        elemType: 'input',\r\n        type: 'text',\r\n        placeholder: 'gif link',\r\n        require: true,\r\n        value: '',\r\n    },\r\n    desktop: {\r\n        id: 'desktop',\r\n        elemType: 'select',\r\n        options : {\r\n            Yes: {\r\n                selected: true,\r\n            },\r\n            No: {\r\n                selected: false\r\n            },\r\n        },        \r\n        require: true,\r\n    },\r\n    mobile: {   \r\n        id: 'mobile',\r\n        elemType: 'select',\r\n        options : {\r\n            Yes: {\r\n                selected: true,\r\n            },\r\n            No: {\r\n                selected: false\r\n            },\r\n        }, \r\n        require: true,\r\n    }\r\n}\r\n\r\ninterface IItemForm {\r\n    show: boolean\r\n    sending: boolean\r\n    close: () => void\r\n    add: (item: IPortfolioItem) => void\r\n}\r\n\r\nconst ItemForm: React.FunctionComponent<IItemForm> = ({ show, close, add, sending }): JSX.Element => {\r\n    const [form, setForm] = React.useState<IForm>(initialForm)\r\n\r\n    console.log(form.languages)\r\n\r\n    const optionClickHandler = (id: string, name: string) => {\r\n        console.log(id, name)\r\n    }\r\n\r\n    const changeHandler = (id: string, event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\r\n        console.log('sup')\r\n        let updatedForm: IForm = { ...form }\r\n        updatedForm = {\r\n            ...form,\r\n            [id]: {\r\n                ...form[id],\r\n                value: event.target.value\r\n            }\r\n        }\r\n        setForm(updatedForm)\r\n    }\r\n\r\n    const addHandler = () => {\r\n        const newItem: IPortfolioItem = {\r\n            title: form.title.value,\r\n            language: [...form.languages.selected],\r\n            description: form.description.value,\r\n            link: form.link.value,\r\n            githubLink: form.github.value,\r\n            video_src: form.video_src.value,\r\n            gif_src: form.gif_src.value,\r\n            desktop: form.desktop.value === 'Yes',\r\n            mobile: form.mobile.value === 'Yes,'\r\n        }\r\n        add(newItem)\r\n    }\r\n    \r\n    const itemFormStyles = [\r\n        css.ItemForm,\r\n        show && css.show\r\n    ].join(' ')\r\n\r\n    const backdropStyles = [\r\n        css.FormBackdrop,\r\n        show && css.show\r\n    ].join(' ')\r\n\r\n    return (\r\n        <>\r\n            <form className={itemFormStyles}>\r\n                { sending && \r\n                    <div className={css.Loading}>\r\n                        <CubeSpinner />\r\n                    </div>\r\n                }\r\n                <FontAwesomeIcon className={css.FormCloseButton} icon={icons.faTimes} onClick={close} />\r\n                { Object.keys(form).map((element: string) => {\r\n                    return (\r\n                        <FormInput key={element} item={form[element]} change={changeHandler} clickOption={optionClickHandler} />\r\n                    )\r\n                })}\r\n                <div className={css.FormAddButton} onClick={addHandler}>\r\n                    <p>add</p>\r\n                </div>\r\n            </form>\r\n            <div className={backdropStyles}></div>\r\n        </>\r\n    )\r\n}\r\n\r\ninterface IFormInput {\r\n    item: any\r\n    change: (id: string, e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => void\r\n    clickOption: (id: string, name: string) => void\r\n}\r\n\r\nconst FormInput: React.FunctionComponent<IFormInput> = React.memo( ({ item, change, clickOption }): JSX.Element => {\r\n    let content = undefined\r\n\r\n    switch (item.elemType) {\r\n        case 'input':\r\n            content = (\r\n                <input value={item.value} \r\n                    placeholder={item.placeholder} \r\n                    onChange={(e) => change(item.id, e)}\r\n                    className={css.FormInput} />\r\n            )\r\n            break;\r\n\r\n        case 'textarea':\r\n            content = (\r\n                <textarea value={item.value}\r\n                    onChange={(e) => change(item.id, e)}\r\n                    placeholder={item.placeholder} \r\n                    className={css.FormInput}\r\n                    rows={5} />\r\n            )\r\n            break;\r\n            \r\n        case 'select':\r\n            content = (\r\n                <div className={css.Select}>\r\n                    { Object.keys(item.options).map((option: any) => {\r\n                        console.log(option)\r\n                        return (\r\n                            <span key={option.name} className={css.Option} onClick={() => clickOption(item.id, option)}>{option}</span>\r\n                        )\r\n                    })}\r\n                </div>\r\n            )\r\n            break;\r\n    }\r\n\r\n    return (\r\n        <div className={css.FormInputContainer}>\r\n            <p className={css.FormInputTitle}>{item.id}</p>\r\n            { content }\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default ItemForm"]},"metadata":{},"sourceType":"module"}