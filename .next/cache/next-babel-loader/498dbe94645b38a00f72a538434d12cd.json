{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { icons } from '../../icons/icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport ExpandedVideo from '../ExpandedVideo/ExpandedVideo';\n\nvar css = require('./Item.module.css');\n\nvar SHOW_TRESHOLD = 100; // pixels\n\nvar Item = function Item(props) {\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      showItem = _React$useState2[0],\n      toggleShowItem = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      showVideo = _React$useState4[0],\n      toggleShowVideo = _React$useState4[1];\n\n  var itemRef = React.useRef(null); // update the event listeners every time the showItem state is changed\n\n  React.useEffect(function () {\n    window.addEventListener('scroll', checkIfInViewport, true);\n    return function () {\n      return window.removeEventListener('scroll', checkIfInViewport, true);\n    };\n  }, [showItem]);\n\n  var checkIfInViewport = function checkIfInViewport() {\n    if (itemRef && itemRef.current) {\n      var itemPos = itemRef.current.getBoundingClientRect().top;\n      var windowHeight = window.innerHeight;\n      var newShowItem = itemPos < windowHeight - SHOW_TRESHOLD;\n      if (newShowItem !== showItem) toggleShowItem(newShowItem);\n    }\n  };\n\n  var itemClasses = [css.Item, showItem && css.show].join(' ');\n  return __jsx(\"div\", {\n    className: itemClasses,\n    ref: itemRef\n  }, __jsx(\"p\", {\n    className: css.Title\n  }, __jsx(\"span\", null, props.title)), __jsx(\"div\", {\n    className: css.ItemContent\n  }, __jsx(ItemPreview, {\n    video_src: props.video_src,\n    preview_src: props.preview_src,\n    gif_src: props.gif_src,\n    link: props.link,\n    githubLink: props.githubLink,\n    toggle: toggleShowVideo\n  }), __jsx(ItemInfo, {\n    languages: props.language,\n    title: props.title,\n    desc: props.description,\n    desktop: props.desktop,\n    mobile: props.mobile,\n    link: props.link,\n    githubLink: props.githubLink\n  })), showVideo && __jsx(ExpandedVideo, {\n    video_src: props.video_src,\n    close: function close() {\n      return toggleShowVideo(false);\n    }\n  }));\n};\n\nvar ItemInfo = function ItemInfo(props) {\n  return __jsx(\"div\", {\n    className: css.InfoContainer\n  }, __jsx(\"div\", {\n    className: css.MadeWith\n  }, \"made with\", props.languages.map(function (lang, index) {\n    return __jsx(\"p\", {\n      key: lang,\n      className: css.Language\n    }, lang, index !== props.languages.length - 1 ? __jsx(\"span\", {\n      style: {\n        color: 'dimgray'\n      }\n    }, \" + \") : '');\n  })), __jsx(\"p\", {\n    className: css.Description\n  }, props.desc), __jsx(\"div\", {\n    className: css.IconsAndLinks\n  }, __jsx(\"div\", {\n    className: css.ItemLinks\n  }, __jsx(\"a\", {\n    className: css.ItemLinkContainer,\n    href: props.githubLink,\n    target: \"_blank\",\n    rel: \"noopener noreferrer\"\n  }, __jsx(\"p\", {\n    className: css.ItemLink\n  }, \"Github\"), __jsx(\"div\", {\n    className: css.ItemLinkIcon\n  }, __jsx(FontAwesomeIcon, {\n    icon: icons.faGithub\n  }))), __jsx(\"a\", {\n    className: css.ItemLinkContainer,\n    href: props.link,\n    target: \"_blank\",\n    rel: \"noopener noreferrer\"\n  }, __jsx(\"p\", {\n    className: css.ItemLink\n  }, \"Open\"), __jsx(\"div\", {\n    className: css.ItemLinkIcon\n  }, __jsx(FontAwesomeIcon, {\n    icon: icons.faExternalLinkSquareAlt\n  })))), __jsx(HardwareIcons, {\n    desktop: props.desktop,\n    mobile: props.mobile\n  })));\n};\n\nvar HardwareIcons = function HardwareIcons(_ref) {\n  var desktop = _ref.desktop,\n      mobile = _ref.mobile;\n  return __jsx(\"div\", {\n    className: css.HardwareIcons\n  }, __jsx(\"div\", {\n    className: css.HardwareIconContainer\n  }, __jsx(\"div\", {\n    className: [css.HardwareIcon, css.DesktopIcon].join(' ')\n  }, __jsx(FontAwesomeIcon, {\n    icon: icons.faDesktop\n  })), desktop ? __jsx(CheckMarkIcon, null) : __jsx(TimesIcon, null)), __jsx(\"div\", {\n    className: css.HardwareIconContainer\n  }, __jsx(\"div\", {\n    className: [css.HardwareIcon, css.MobileIcon].join(' ')\n  }, __jsx(FontAwesomeIcon, {\n    icon: icons.faMobileAlt\n  })), mobile ? __jsx(CheckMarkIcon, null) : __jsx(TimesIcon, null)));\n};\n\nvar CheckMarkIcon = function CheckMarkIcon() {\n  return __jsx(\"div\", {\n    className: [css.HardwareIcon, css.CheckMarkIcon].join(' ')\n  }, __jsx(FontAwesomeIcon, {\n    icon: icons.faCheck,\n    color: \"green\"\n  }));\n};\n\nvar TimesIcon = function TimesIcon() {\n  return __jsx(\"div\", {\n    className: [css.HardwareIcon, css.TimesIcon].join(' ')\n  }, __jsx(FontAwesomeIcon, {\n    icon: icons.faTimes,\n    color: \"crimson\"\n  }));\n};\n\nvar ItemPreview = function ItemPreview(props) {\n  return __jsx(\"div\", {\n    className: css.PreviewContainer\n  }, __jsx(\"video\", {\n    className: css.PreviewVideo,\n    poster: props.gif_src,\n    muted: true,\n    autoPlay: true,\n    playsInline: true,\n    loop: true\n  }, __jsx(\"source\", {\n    src: props.preview_src,\n    type: \"video/mp4\"\n  })), __jsx(\"div\", {\n    className: css.PreviewMask\n  }, __jsx(\"div\", {\n    className: css.MaskLinks\n  }, __jsx(ExpandVideo, {\n    toggle: props.toggle\n  }))));\n};\n\nvar ExpandVideo = function ExpandVideo(_ref2) {\n  var toggle = _ref2.toggle;\n  var classes = [css.ExpandVideo].join(' ');\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: classes,\n    onClick: function onClick() {\n      return toggle(true);\n    }\n  }, __jsx(\"p\", null, \"Expand Video\"), __jsx(FontAwesomeIcon, {\n    icon: icons.faExpand,\n    color: \"white\"\n  })));\n};\n\nvar MaskLink = function MaskLink(_ref3) {\n  var address = _ref3.address,\n      text = _ref3.text;\n  return __jsx(\"a\", {\n    href: address,\n    className: css.MaskLink,\n    target: \"_blank\",\n    rel: \"noopener noreferrer\"\n  }, __jsx(\"div\", {\n    className: css.MaskLinkText\n  }, __jsx(\"span\", null, text)));\n};\n\nexport default Item;","map":null,"metadata":{},"sourceType":"module"}