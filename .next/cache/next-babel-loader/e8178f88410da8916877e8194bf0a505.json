{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { icons } from '../../../icons/icons';\nimport { initialForm, updateEditForm, formTypes } from '../../../form/form';\nimport Loading from '../../UI/Loading/Loading';\n\nvar css = require('./ItemForm.module.css');\n\nvar ItemForm = function ItemForm(_ref) {\n  var show = _ref.show,\n      sending = _ref.sending,\n      item = _ref.item,\n      close = _ref.close,\n      add = _ref.add,\n      type = _ref.type;\n\n  var _React$useState = React.useState(initialForm),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      form = _React$useState2[0],\n      setForm = _React$useState2[1];\n\n  React.useEffect(function () {\n    if (!!item) {\n      // update each field manually cus we bad\n      var updatedForm = updateEditForm(item);\n      setForm(updatedForm);\n    }\n  }, [item]);\n\n  var optionClickHandler = function optionClickHandler(id, name) {\n    var updatedForm = _objectSpread({}, form);\n\n    if (id === 'language') {\n      updatedForm = _objectSpread({}, form, _defineProperty({}, id, _objectSpread({}, form[id], {\n        options: _objectSpread({}, form[id].options, _defineProperty({}, name, _objectSpread({}, form[id].options[name], {\n          selected: !form[id].options[name].selected\n        })))\n      })));\n    } else {\n      updatedForm = _objectSpread({}, form, _defineProperty({}, id, _objectSpread({}, form[id], {\n        options: {\n          Yes: {\n            selected: name === 'Yes'\n          },\n          No: {\n            selected: name === 'No'\n          }\n        }\n      })));\n    }\n\n    setForm(updatedForm);\n  };\n\n  var changeHandler = function changeHandler(id, event) {\n    var updatedForm = _objectSpread({}, form);\n\n    updatedForm = _objectSpread({}, form, _defineProperty({}, id, _objectSpread({}, form[id], {\n      value: event.target.value\n    })));\n    setForm(updatedForm);\n  };\n\n  var addHandler = function addHandler() {\n    var selectedLanguages = _Object$keys(form.language.options).filter(function (option) {\n      return form.language.options[option].selected;\n    });\n\n    if (selectedLanguages.length === 0) selectedLanguages = ['React'];\n    var newItem = {\n      title: form.title.value,\n      language: selectedLanguages,\n      description: form.description.value,\n      link: form.link.value,\n      githubLink: form.github.value,\n      video_src: form.video_src.value,\n      preview_src: form.preview_src.value,\n      gif_src: form.gif_src.value,\n      desktop: form.desktop.options.Yes.selected,\n      mobile: form.mobile.options.Yes.selected,\n      order: form.order.value\n    };\n    add(newItem);\n  };\n\n  var itemFormStyles = [css.ItemForm, show && css.show].join(' ');\n  var backdropStyles = [css.FormBackdrop, show && css.show].join(' ');\n  return __jsx(React.Fragment, null, __jsx(\"form\", {\n    className: itemFormStyles\n  }, __jsx(Loading, {\n    show: sending,\n    transparent: true,\n    fadeout: true\n  }), __jsx(FontAwesomeIcon, {\n    className: css.FormCloseButton,\n    icon: icons.faTimes,\n    onClick: close\n  }), _Object$keys(form).map(function (element) {\n    return __jsx(FormInput, {\n      key: element,\n      type: type,\n      item: form[element],\n      change: changeHandler,\n      clickOption: optionClickHandler\n    });\n  }), __jsx(\"div\", {\n    className: css.FormAddButton,\n    onClick: addHandler\n  }, __jsx(\"p\", null, type))), __jsx(\"div\", {\n    className: backdropStyles\n  }));\n};\n\nvar FormInput = React.memo(function (_ref2) {\n  var type = _ref2.type,\n      item = _ref2.item,\n      change = _ref2.change,\n      clickOption = _ref2.clickOption;\n  var content = undefined;\n\n  switch (item.elemType) {\n    case 'input':\n      content = __jsx(\"input\", {\n        value: item.value,\n        disabled: type === formTypes.EDIT && item.id === 'title',\n        placeholder: item.placeholder,\n        onChange: function onChange(e) {\n          return change(item.id, e);\n        },\n        className: css.FormInput\n      });\n      break;\n\n    case 'textarea':\n      content = __jsx(\"textarea\", {\n        value: item.value,\n        onChange: function onChange(e) {\n          return change(item.id, e);\n        },\n        placeholder: item.placeholder,\n        className: css.FormInput,\n        rows: 5\n      });\n      break;\n\n    case 'select':\n      content = __jsx(\"div\", {\n        className: css.Select\n      }, _Object$keys(item.options).map(function (option) {\n        var selected = item.options[option].selected;\n        return __jsx(\"div\", {\n          key: item.id + option,\n          className: [css.Option, selected && css.selected].join(' '),\n          onClick: function onClick() {\n            return clickOption(item.id, option);\n          }\n        }, option);\n      }));\n      break;\n  }\n\n  return __jsx(\"div\", {\n    className: css.FormInputContainer\n  }, __jsx(\"p\", {\n    className: css.FormInputTitle\n  }, item.id), content);\n});\nexport default ItemForm;","map":{"version":3,"sources":["C:/Users/jouna/code/portfolio/components/Admin/ItemForm/ItemForm.tsx"],"names":["React","FontAwesomeIcon","icons","initialForm","updateEditForm","formTypes","Loading","css","require","ItemForm","show","sending","item","close","add","type","useState","form","setForm","useEffect","updatedForm","optionClickHandler","id","name","options","selected","Yes","No","changeHandler","event","value","target","addHandler","selectedLanguages","language","filter","option","length","newItem","title","description","link","githubLink","github","video_src","preview_src","gif_src","desktop","mobile","order","itemFormStyles","join","backdropStyles","FormBackdrop","FormCloseButton","faTimes","map","element","FormAddButton","FormInput","memo","change","clickOption","content","undefined","elemType","EDIT","placeholder","e","Select","Option","FormInputContainer","FormInputTitle"],"mappings":"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","sourcesContent":["import * as React from 'react'\r\n\r\nimport { IPortfolioItem } from '../../../interfaces/interfaces'\r\nimport { CubeSpinner } from '../../UI/Spinner/Spinner'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { icons } from '../../../icons/icons'\r\nimport { IForm, initialForm, updateEditForm, formTypes } from '../../../form/form'\r\nimport Loading from '../../UI/Loading/Loading'\r\n\r\nconst css = require('./ItemForm.module.css')\r\n\r\ninterface IItemForm {\r\n    show: boolean\r\n    sending: boolean\r\n    item?: IPortfolioItem\r\n    type: string\r\n    close(): void\r\n    add(item: IPortfolioItem): void\r\n}\r\n\r\nconst ItemForm: React.FunctionComponent<IItemForm> = ({ show, sending, item, close, add, type }): JSX.Element => {\r\n    const [form, setForm] = React.useState<IForm>(initialForm)\r\n\r\n    React.useEffect(() => {\r\n        if (!!item) {\r\n            // update each field manually cus we bad\r\n            const updatedForm: IForm = updateEditForm(item)\r\n            setForm(updatedForm)     \r\n        }   \r\n    }, [item])\r\n\r\n    const optionClickHandler = (id: string, name: string) => {\r\n        let updatedForm: IForm = { ...form }\r\n        if (id === 'language') {\r\n            updatedForm = {\r\n                ...form,\r\n                [id]: {\r\n                    ...form[id],\r\n                    options: {\r\n                        ...form[id].options,\r\n                        [name]: {\r\n                            ...form[id].options[name],\r\n                            selected: !form[id].options[name].selected,\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            updatedForm = {\r\n                ...form,\r\n                [id]: {\r\n                    ...form[id],\r\n                    options: {\r\n                        Yes: {\r\n                            selected: name === 'Yes',\r\n                        },\r\n                        No: {\r\n                            selected: name === 'No',\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        setForm(updatedForm)\r\n    }\r\n\r\n    const changeHandler = (id: string, event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\r\n        let updatedForm: IForm = { ...form }\r\n        updatedForm = {\r\n            ...form,\r\n            [id]: {\r\n                ...form[id],\r\n                value: event.target.value\r\n            }\r\n        }\r\n        setForm(updatedForm)\r\n    }\r\n\r\n    const addHandler = () => {\r\n        let selectedLanguages = Object.keys(form.language.options).filter(option => form.language.options[option].selected)\r\n        if (selectedLanguages.length === 0) selectedLanguages = ['React']\r\n\r\n        const newItem: IPortfolioItem = {\r\n            title: form.title.value,\r\n            language: selectedLanguages,\r\n            description: form.description.value,\r\n            link: form.link.value,\r\n            githubLink: form.github.value,\r\n            video_src: form.video_src.value,\r\n            preview_src: form.preview_src.value,\r\n            gif_src: form.gif_src.value,\r\n            desktop: form.desktop.options.Yes.selected,\r\n            mobile: form.mobile.options.Yes.selected,\r\n            order: form.order.value,\r\n        }\r\n        add(newItem)\r\n    }\r\n    \r\n    const itemFormStyles = [\r\n        css.ItemForm,\r\n        show && css.show\r\n    ].join(' ')\r\n\r\n    const backdropStyles = [\r\n        css.FormBackdrop,\r\n        show && css.show\r\n    ].join(' ')\r\n\r\n    return (\r\n        <>\r\n            <form className={itemFormStyles}>\r\n                <Loading show={sending} transparent fadeout />\r\n                <FontAwesomeIcon className={css.FormCloseButton} icon={icons.faTimes} onClick={close} />\r\n                { Object.keys(form).map((element: string) => {\r\n                    return (\r\n                        <FormInput key={element} type={type} item={form[element]} change={changeHandler} clickOption={optionClickHandler} />\r\n                    )\r\n                })}\r\n                <div className={css.FormAddButton} onClick={addHandler}>\r\n                    <p>{type}</p>\r\n                </div>\r\n            </form>\r\n            <div className={backdropStyles}></div>\r\n        </>\r\n    )\r\n}\r\n\r\ninterface IFormInput {\r\n    type: string\r\n    item: any\r\n    change: (id: string, e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => void\r\n    clickOption: (id: string, name: string) => void\r\n}\r\n\r\nconst FormInput: React.FunctionComponent<IFormInput> = React.memo( ({ type, item, change, clickOption }): JSX.Element => {\r\n    let content = undefined\r\n\r\n    switch (item.elemType) {\r\n        case 'input':\r\n            content = (\r\n                <input value={item.value} \r\n                    disabled={type === formTypes.EDIT && item.id === 'title'}\r\n                    placeholder={item.placeholder} \r\n                    onChange={(e) => change(item.id, e)}\r\n                    className={css.FormInput} />\r\n            )\r\n            break;\r\n\r\n        case 'textarea':\r\n            content = (\r\n                <textarea value={item.value}\r\n                    onChange={(e) => change(item.id, e)}\r\n                    placeholder={item.placeholder} \r\n                    className={css.FormInput}\r\n                    rows={5} />\r\n            )\r\n            break;\r\n            \r\n        case 'select':\r\n            content = (\r\n                <div className={css.Select}>\r\n                    { Object.keys(item.options).map((option: any) => {\r\n                        const selected: boolean = item.options[option].selected\r\n                        return (\r\n                            <div key={item.id + option} \r\n                                className={[css.Option, selected && css.selected].join(' ')} \r\n                                onClick={() => clickOption(item.id, option)}>{option}</div>\r\n                        )\r\n                    })}\r\n                </div>\r\n            )\r\n            break;\r\n    }\r\n\r\n    return (\r\n        <div className={css.FormInputContainer}>\r\n            <p className={css.FormInputTitle}>{item.id}</p>\r\n            { content }\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default ItemForm"]},"metadata":{},"sourceType":"module"}