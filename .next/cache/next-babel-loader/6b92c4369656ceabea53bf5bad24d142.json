{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport Auth from '../../containers/Auth/Auth';\nimport { AuthContext } from '../../context/authContext';\nimport { PortfolioContext, TPortfolioActionTypes } from '../../context/portfolioContext';\nimport PortfolioItems from '../../components/Admin/PortfolioManagement/Portfolio';\nimport Loading from '../../components/UI/Loading/Loading';\n\nvar css = require('./Admin.module.css');\n\nvar Admin = function Admin() {\n  var authContext = React.useContext(AuthContext);\n  var authState = authContext.state;\n  var authDispatch = authContext.dispatch;\n\n  var _React$useState = React.useState(true),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      sending = _React$useState2[0],\n      setSending = _React$useState2[1];\n\n  var _React$useState3 = React.useState(),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      screensize = _React$useState4[0],\n      setScreensize = _React$useState4[1];\n\n  React.useEffect(function () {\n    document.title = 'Portfolio // Admin';\n    setScreensize({\n      width: window.innerWidth,\n      height: window.innerHeight\n    });\n\n    if (localStorage.length !== 0) {\n      // check for auth info in local storage\n      // compare current time in milliseconds to expire time in storage\n      // if current time is LESS, use the auth info from storage to refresh\n      // else, clear local storage\n      var expireTime = localStorage.getItem('expireTime');\n\n      if (expireTime) {\n        // if auth token has not expired yet\n        if (new Date().getTime() < +expireTime) {\n          var authInfo = {\n            email: localStorage.getItem('email'),\n            password: localStorage.getItem('password'),\n            idToken: localStorage.getItem('idToken')\n          };\n          authDispatch({\n            type: 'signin',\n            payload: authInfo\n          });\n          setSending(false); // if auth has expired\n        } else {\n          localStorage.clear();\n          setSending(false);\n        }\n      }\n    } else {\n      setSending(false);\n    }\n  }, []);\n\n  var signInHandler = function signInHandler(email, password, idToken) {\n    var authInfo = {\n      email: email,\n      password: password,\n      idToken: idToken\n    };\n    authDispatch({\n      type: 'signin',\n      payload: authInfo\n    });\n  };\n\n  return __jsx(\"div\", {\n    className: css.Main,\n    style: {\n      minHeight: \"\".concat(screensize === null || screensize === void 0 ? void 0 : screensize.height, \"px\"),\n      minWidth: \"\".concat(screensize === null || screensize === void 0 ? void 0 : screensize.width, \"px\")\n    }\n  }, !authState.signedIn && __jsx(Auth, {\n    setSending: setSending,\n    signIn: signInHandler\n  }), authState.signedIn && __jsx(AdminContent, {\n    token: authState.idToken\n  }), __jsx(Loading, {\n    show: sending,\n    transparent: true,\n    fadeout: true\n  }));\n};\n\nvar AdminContent = function AdminContent() {\n  var portfolioContext = React.useContext(PortfolioContext);\n  var portfolioState = portfolioContext.state;\n  var portfolioDispatch = portfolioContext.dispatch;\n\n  var _React$useState5 = React.useState(true),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      loading = _React$useState6[0],\n      setLoading = _React$useState6[1];\n\n  React.useEffect(function () {\n    if (portfolioState.items.length === 0) {\n      var baseURL = 'https://joonajo-portfolio.firebaseio.com/items.json';\n      var newItems = [];\n      fetch(baseURL, {\n        method: 'get'\n      }).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        if (data) {\n          _Object$keys(data).forEach(function (item) {\n            newItems.push(data[item]);\n          });\n\n          portfolioDispatch({\n            type: TPortfolioActionTypes.SET_ITEMS,\n            payload: newItems\n          });\n        }\n\n        setLoading(false);\n      });\n    } else {\n      setLoading(false);\n    }\n  }, [portfolioState]);\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: css.AdminContentWrapper\n  }, !loading && __jsx(PortfolioItems, {\n    items: portfolioState.items\n  })), __jsx(Loading, {\n    show: loading,\n    transparent: true,\n    fadeout: true\n  }));\n};\n\nexport default Admin;","map":null,"metadata":{},"sourceType":"module"}