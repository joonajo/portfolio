{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport Auth from '../../containers/Auth/Auth';\nimport { CubeSpinner } from '../../components/UI/Spinner/Spinner';\nimport { AuthContext } from '../../context/authContext';\nimport { PortfolioContext, TPortfolioActionTypes } from '../../context/portfolioContext';\nimport PortfolioItems from '../../components/Admin/PortfolioManagement/Portfolio';\n\nconst css = require('./Admin.module.css');\n\nconst Admin = () => {\n  const authContext = React.useContext(AuthContext);\n  const authState = authContext.state;\n  const authDispatch = authContext.dispatch;\n  const [sending, setSending] = React.useState(true);\n  const [screensize, setScreensize] = React.useState();\n  React.useEffect(() => {\n    document.title = 'Portfolio // Admin';\n    setScreensize({\n      width: window.innerWidth,\n      height: window.innerHeight\n    });\n\n    if (localStorage.length !== 0) {\n      // check for auth info in local storage\n      // compare current time in milliseconds to expire time in storage\n      // if current time is LESS, use the auth info from storage to refresh\n      // else, clear local storage\n      const expireTime = localStorage.getItem('expireTime');\n\n      if (expireTime) {\n        // if auth token has not expired yet\n        if (new Date().getTime() < +expireTime) {\n          const authInfo = {\n            email: localStorage.getItem('email'),\n            password: localStorage.getItem('password'),\n            idToken: localStorage.getItem('idToken')\n          };\n          authDispatch({\n            type: 'signin',\n            payload: authInfo\n          });\n          setSending(false); // if auth has expired\n        } else {\n          localStorage.clear();\n          setSending(false);\n        }\n      }\n    } else {\n      setSending(false);\n    }\n  }, []);\n\n  const signInHandler = (email, password, idToken) => {\n    const authInfo = {\n      email: email,\n      password: password,\n      idToken: idToken\n    };\n    authDispatch({\n      type: 'signin',\n      payload: authInfo\n    });\n  };\n\n  return __jsx(\"div\", {\n    className: css.Main,\n    style: {\n      minHeight: `${screensize === null || screensize === void 0 ? void 0 : screensize.height}px`,\n      minWidth: `${screensize === null || screensize === void 0 ? void 0 : screensize.width}px`\n    }\n  }, !authState.signedIn && __jsx(Auth, {\n    setSending: setSending,\n    signIn: signInHandler\n  }), sending && __jsx(Loading, null), authState.signedIn && __jsx(AdminContent, {\n    token: authState.idToken\n  }));\n};\n\nconst AdminContent = ({\n  token\n}) => {\n  const portfolioContext = React.useContext(PortfolioContext);\n  const portfolioState = portfolioContext.state;\n  const portfolioDispatch = portfolioContext.dispatch;\n  const [loading, setLoading] = React.useState(true);\n  React.useEffect(() => {\n    if (portfolioState && portfolioDispatch) {\n      if (portfolioState.items.length === 0) {\n        const baseURL = 'https://joonajo-portfolio.firebaseio.com/items.json';\n        const newItems = [];\n        fetch(baseURL, {\n          method: 'get'\n        }).then(response => response.json()).then(data => {\n          if (data) {\n            _Object$keys(data).forEach(item => {\n              newItems.push(data[item]);\n            });\n\n            portfolioDispatch({\n              type: TPortfolioActionTypes.SET_ITEMS,\n              payload: newItems\n            });\n          }\n\n          setLoading(false);\n        });\n      } else {\n        setLoading(false);\n      }\n    }\n  }, [portfolioState]);\n  return __jsx(\"div\", {\n    className: css.AdminContentWrapper\n  }, loading ? __jsx(\"div\", {\n    className: css.Loading\n  }, __jsx(CubeSpinner, null)) : __jsx(PortfolioItems, {\n    items: portfolioState.items\n  }));\n};\n\nconst Loading = () => __jsx(\"div\", {\n  className: css.Loading\n}, __jsx(CubeSpinner, null));\n\nexport default Admin;","map":{"version":3,"sources":["C:/Users/jouna/code/portfolio/containers/Admin/Admin.tsx"],"names":["React","Auth","CubeSpinner","AuthContext","PortfolioContext","TPortfolioActionTypes","PortfolioItems","css","require","Admin","authContext","useContext","authState","state","authDispatch","dispatch","sending","setSending","useState","screensize","setScreensize","useEffect","document","title","width","window","innerWidth","height","innerHeight","localStorage","length","expireTime","getItem","Date","getTime","authInfo","email","password","idToken","type","payload","clear","signInHandler","Main","minHeight","minWidth","signedIn","AdminContent","token","portfolioContext","portfolioState","portfolioDispatch","loading","setLoading","items","baseURL","newItems","fetch","method","then","response","json","data","forEach","item","push","SET_ITEMS","AdminContentWrapper","Loading"],"mappings":"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","sourcesContent":["import * as React from 'react'\r\n\r\nimport Auth from '../../containers/Auth/Auth'\r\nimport { CubeSpinner } from '../../components/UI/Spinner/Spinner'\r\nimport { IPortfolioItem } from '../../interfaces/interfaces'\r\nimport { IAuthContext, AuthContext, TAuthState, TDispatch } from '../../context/authContext'\r\nimport { Languages, IPortfolioContext, PortfolioContext, TPortfolioState, TPortfolioActionTypes } from '../../context/portfolioContext'\r\nimport PortfolioItems from '../../components/Admin/PortfolioManagement/Portfolio'\r\n\r\nconst css = require('./Admin.module.css')\r\n\r\nconst Admin: React.FunctionComponent = (): JSX.Element => {\r\n    const authContext: IAuthContext = React.useContext(AuthContext)\r\n    const authState: TAuthState = authContext.state\r\n    const authDispatch: TDispatch = authContext.dispatch!\r\n\r\n    const [sending, setSending] = React.useState<boolean>(true)\r\n    const [screensize, setScreensize] = React.useState<{ width: number, height: number}>()\r\n\r\n    React.useEffect(() => {\r\n        document.title = 'Portfolio // Admin'\r\n\r\n        setScreensize({\r\n            width: window.innerWidth,\r\n            height: window.innerHeight\r\n        })\r\n\r\n        if (localStorage.length !== 0) {\r\n            // check for auth info in local storage\r\n            // compare current time in milliseconds to expire time in storage\r\n            // if current time is LESS, use the auth info from storage to refresh\r\n            // else, clear local storage\r\n            const expireTime = (localStorage.getItem('expireTime'))\r\n            if (expireTime) {\r\n                // if auth token has not expired yet\r\n                if (new Date().getTime() < +expireTime) {\r\n                    const authInfo = {\r\n                        email: localStorage.getItem('email')!,\r\n                        password: localStorage.getItem('password')!,\r\n                        idToken: localStorage.getItem('idToken')!\r\n                    }\r\n                    authDispatch({ type: 'signin', payload: authInfo })\r\n                    setSending(false)\r\n                // if auth has expired\r\n                } else {\r\n                    localStorage.clear()\r\n                    setSending(false)\r\n                }\r\n            }\r\n        } else {\r\n            setSending(false)\r\n        }\r\n    }, [])\r\n\r\n    const signInHandler = (email: string, password: string, idToken: string) => {\r\n        const authInfo = {\r\n            email: email,\r\n            password: password,\r\n            idToken: idToken\r\n        }\r\n        authDispatch({ type: 'signin', payload: authInfo })\r\n    }\r\n\r\n    return (\r\n        <div className={css.Main} style={{minHeight: `${screensize?.height}px`, minWidth: `${screensize?.width}px`}}>\r\n            { !authState.signedIn && <Auth setSending={setSending} signIn={signInHandler} /> }\r\n            { sending && <Loading /> }\r\n            { authState. signedIn && <AdminContent token={authState.idToken!} /> }\r\n        </div>\r\n    )\r\n}\r\n\r\ninterface IAdminContent {\r\n    token: string\r\n}\r\n\r\nconst AdminContent: React.FunctionComponent<IAdminContent> = ({ token }): JSX.Element => {\r\n    const portfolioContext: IPortfolioContext = React.useContext(PortfolioContext)\r\n    const portfolioState: TPortfolioState = portfolioContext.state\r\n    const portfolioDispatch: TDispatch = portfolioContext.dispatch!\r\n\r\n    const [loading, setLoading] = React.useState<boolean>(true)\r\n\r\n    React.useEffect(() => {\r\n        if (portfolioState && portfolioDispatch) {\r\n            if (portfolioState.items.length === 0) {\r\n                const baseURL: string = 'https://joonajo-portfolio.firebaseio.com/items.json'\r\n\r\n                const newItems: IPortfolioItem[] = []\r\n                \r\n                fetch(baseURL, { method: 'get' }).then(response => response.json())\r\n                    .then(data => {\r\n                        if (data) {\r\n                            Object.keys(data).forEach(item => {\r\n                                newItems.push(data[item])\r\n                            })\r\n                            portfolioDispatch({ type: TPortfolioActionTypes.SET_ITEMS, payload: newItems })\r\n                        }\r\n                        setLoading(false)\r\n                    })\r\n            } else {\r\n                setLoading(false)\r\n            }\r\n        }\r\n    }, [portfolioState])\r\n   \r\n    return (\r\n        <div className={css.AdminContentWrapper}>\r\n            { loading ?\r\n                <div className={css.Loading}>\r\n                    <CubeSpinner />\r\n                </div>\r\n                : <PortfolioItems items={portfolioState.items} />\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Loading: React.FunctionComponent = (): JSX.Element => (\r\n    <div className={css.Loading}>\r\n        <CubeSpinner />\r\n    </div>\r\n)\r\n\r\nexport default Admin\r\n"]},"metadata":{},"sourceType":"module"}