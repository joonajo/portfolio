{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nexport const Languages = {\n  React: 'React',\n  TypeScript: 'TypeScript',\n  JavaScript: 'JavaScript',\n  Cpp: 'C++',\n  NextJS: 'NextJS'\n};\nexport let TPortfolioActionTypes;\n\n(function (TPortfolioActionTypes) {\n  TPortfolioActionTypes[\"FETCH_ITEMS\"] = \"FETCH_ITEMS\";\n  TPortfolioActionTypes[\"SET_ITEMS\"] = \"SET_ITEMS\";\n  TPortfolioActionTypes[\"EDIT_ITEM\"] = \"EDIT_ITEM\";\n  TPortfolioActionTypes[\"DELETE_ITEM\"] = \"DELETE_ITEM\";\n  TPortfolioActionTypes[\"ADD_ITEM\"] = \"ADD_ITEM\";\n})(TPortfolioActionTypes || (TPortfolioActionTypes = {}));\n\nexport const initialPortfolioState = {\n  items: []\n};\n\nconst fetchItems = (state, action) => {\n  if (action.type !== TPortfolioActionTypes.FETCH_ITEMS) return _objectSpread({}, state);\n  const baseURL = 'https://joonajo-portfolio.firebaseio.com/items.json';\n  const newItems = [];\n  fetch(baseURL, {\n    method: 'get'\n  }).then(response => response.json()).then(data => {\n    if (data) {\n      _Object$keys(data).forEach(item => {\n        newItems.push(data[item]);\n      });\n    }\n  });\n  return _objectSpread({}, state, {\n    items: newItems\n  });\n};\n\nconst setItems = (state, action) => {\n  if (action.type !== TPortfolioActionTypes.SET_ITEMS) return _objectSpread({}, state);\n  return _objectSpread({}, state, {\n    items: action.payload\n  });\n};\n\nconst addItem = (state, action) => {\n  if (action.type !== TPortfolioActionTypes.ADD_ITEM) return _objectSpread({}, state);\n  const updatedItems = [...state.items];\n  updatedItems.push(action.payload);\n  return _objectSpread({}, state, {\n    items: updatedItems\n  });\n};\n\nconst deleteItem = (state, action) => {\n  if (action.type !== TPortfolioActionTypes.DELETE_ITEM) return _objectSpread({}, state);\n  const updatedItems = [...state.items].filter(item => item.title !== action.payload);\n  return _objectSpread({}, state, {\n    items: updatedItems\n  });\n};\n\nconst editItem = (state, action) => {\n  if (action.type !== TPortfolioActionTypes.EDIT_ITEM) return _objectSpread({}, state);\n  return _objectSpread({}, state);\n};\n\nexport const portfolioReducer = (state = initialPortfolioState, action) => {\n  switch (action.type) {\n    case TPortfolioActionTypes.SET_ITEMS:\n      return setItems(state, action);\n\n    case TPortfolioActionTypes.DELETE_ITEM:\n      return deleteItem(state, action);\n\n    case TPortfolioActionTypes.EDIT_ITEM:\n      return editItem(state, action);\n\n    case TPortfolioActionTypes.ADD_ITEM:\n      return addItem(state, action);\n\n    default:\n      return _objectSpread({}, state);\n  }\n};\nexport const PortfolioContext = React.createContext({\n  state: initialPortfolioState\n});\nexport const PortfolioProvider = ({\n  children\n}) => {\n  const [state, dispatch] = React.useReducer(portfolioReducer, initialPortfolioState);\n  return __jsx(PortfolioContext.Provider, {\n    value: {\n      state,\n      dispatch\n    }\n  }, children);\n};","map":{"version":3,"sources":["C:/Users/jouna/code/portfolio/context/portfolioContext.tsx"],"names":["React","Languages","TypeScript","JavaScript","Cpp","NextJS","TPortfolioActionTypes","initialPortfolioState","items","fetchItems","state","action","type","FETCH_ITEMS","baseURL","newItems","fetch","method","then","response","json","data","forEach","item","push","setItems","SET_ITEMS","payload","addItem","ADD_ITEM","updatedItems","deleteItem","DELETE_ITEM","filter","title","editItem","EDIT_ITEM","portfolioReducer","PortfolioContext","createContext","PortfolioProvider","children","dispatch","useReducer"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { IPortfolioItem } from '../interfaces/interfaces'\r\nimport { TDispatch } from './authContext'\r\n\r\nexport type TPortfolioState = {\r\n    items: IPortfolioItem[]\r\n}\r\n\r\nexport const Languages = {\r\n    React: 'React',\r\n    TypeScript: 'TypeScript',\r\n    JavaScript: 'JavaScript',\r\n    Cpp: 'C++',\r\n    NextJS: 'NextJS',\r\n}\r\n\r\nexport enum TPortfolioActionTypes {\r\n    FETCH_ITEMS = \"FETCH_ITEMS\",\r\n    SET_ITEMS = \"SET_ITEMS\",\r\n    EDIT_ITEM = \"EDIT_ITEM\",\r\n    DELETE_ITEM = \"DELETE_ITEM\",\r\n    ADD_ITEM = \"ADD_ITEM\"\r\n}\r\n\r\nexport type TPortfolioActions = \r\n| ({ type: TPortfolioActionTypes.FETCH_ITEMS })\r\n| ({ type: TPortfolioActionTypes.SET_ITEMS, payload: IPortfolioItem[] })\r\n| ({ type: TPortfolioActionTypes.DELETE_ITEM, payload: string })\r\n| ({ type: TPortfolioActionTypes.EDIT_ITEM, payload: string })\r\n| ({ type: TPortfolioActionTypes.ADD_ITEM, payload: IPortfolioItem })\r\n\r\nexport const initialPortfolioState: TPortfolioState = {\r\n    items: []\r\n}\r\n\r\nconst fetchItems = (state: TPortfolioState, action: TPortfolioActions): TPortfolioState => {\r\n    if (action.type !== TPortfolioActionTypes.FETCH_ITEMS) return { ...state }\r\n\r\n    const baseURL: string = 'https://joonajo-portfolio.firebaseio.com/items.json'\r\n\r\n    const newItems: IPortfolioItem[] = []\r\n    \r\n    fetch(baseURL, { method: 'get' }).then(response => response.json())\r\n        .then(data => {\r\n            if (data) {\r\n                Object.keys(data).forEach(item => {\r\n                    newItems.push(data[item])\r\n                })\r\n            }\r\n        })\r\n\r\n    return {\r\n        ...state,\r\n        items: newItems,\r\n    }\r\n}\r\n\r\nconst setItems = (state: TPortfolioState, action: TPortfolioActions): TPortfolioState => {\r\n    if (action.type !== TPortfolioActionTypes.SET_ITEMS) return { ...state }\r\n\r\n    return {\r\n        ...state,\r\n        items: action.payload\r\n    }\r\n}\r\n\r\nconst addItem = (state: TPortfolioState, action: TPortfolioActions): TPortfolioState => {\r\n    if (action.type !== TPortfolioActionTypes.ADD_ITEM) return { ...state }\r\n\r\n    const updatedItems: IPortfolioItem[] = [...state.items]\r\n    updatedItems.push(action.payload)\r\n\r\n    return {\r\n        ...state,\r\n        items: updatedItems\r\n    }\r\n}\r\n\r\nconst deleteItem = (state: TPortfolioState, action: TPortfolioActions): TPortfolioState => {\r\n    if (action.type !== TPortfolioActionTypes.DELETE_ITEM) return { ...state }\r\n\r\n    const updatedItems: IPortfolioItem[] = [...state.items].filter(item => item.title !== action.payload)\r\n\r\n    return {\r\n        ...state,\r\n        items: updatedItems\r\n    }\r\n}\r\n\r\nconst editItem = (state: TPortfolioState, action: TPortfolioActions): TPortfolioState => {\r\n    if (action.type !== TPortfolioActionTypes.EDIT_ITEM) return { ...state }\r\n\r\n    return {\r\n        ...state,\r\n    }\r\n}\r\n\r\nexport const portfolioReducer = (state: TPortfolioState = initialPortfolioState, action: TPortfolioActions): TPortfolioState => {\r\n    switch (action.type) {\r\n        case TPortfolioActionTypes.SET_ITEMS:\r\n            return setItems(state, action)\r\n\r\n        case TPortfolioActionTypes.DELETE_ITEM:\r\n            return deleteItem(state, action)\r\n\r\n        case TPortfolioActionTypes.EDIT_ITEM:\r\n            return editItem(state, action)\r\n    \r\n        case TPortfolioActionTypes.ADD_ITEM:\r\n            return addItem(state, action)\r\n            \r\n        default:\r\n            return { ...state }\r\n    }\r\n}\r\n\r\nexport interface IPortfolioContext {\r\n    state: TPortfolioState,\r\n    dispatch?: TDispatch\r\n}\r\n\r\nexport const PortfolioContext = React.createContext<IPortfolioContext>({ state: initialPortfolioState })\r\n\r\ninterface IPortfolioProvider {\r\n    children: any\r\n}\r\n\r\nexport const PortfolioProvider: React.FunctionComponent<IPortfolioProvider> = ({ children }) => {\r\n    const[state, dispatch] = React.useReducer(portfolioReducer, initialPortfolioState)\r\n\r\n    return (\r\n        <PortfolioContext.Provider value={{state, dispatch}}>\r\n            {children}\r\n        </PortfolioContext.Provider>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}