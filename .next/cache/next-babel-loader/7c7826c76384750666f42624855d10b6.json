{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { icons } from '../../icons/icons';\n\nconst css = require('./ExpandedVideo.module.css');\n\nconst ExpandedVideo = ({\n  video_src,\n  close\n}) => {\n  const [unmount, setUnmount] = React.useState(false);\n  React.useEffect(() => {\n    window.addEventListener('keydown', keyHandler, true);\n    return () => window.removeEventListener('keydown', keyHandler, true);\n  }, []);\n  React.useLayoutEffect(() => {\n    // Get original body overflow\n    const originalStyle = window.getComputedStyle(document.body).overflow; // Prevent scrolling on mount\n\n    document.body.style.overflow = 'hidden'; // Re-enable scrolling when component unmounts\n\n    return () => {\n      document.body.style.overflow = originalStyle;\n    };\n  }, []); // Empty array ensures effect is only run on mount and unmount\n\n  const keyHandler = React.useCallback(event => {\n    console.log(event.key);\n\n    switch (event.key) {\n      case 'Escape':\n        closeHandler();\n        break;\n\n      default:\n        break;\n    }\n  }, []);\n  const closeHandler = React.useCallback(() => {\n    setUnmount(true);\n    setTimeout(() => {\n      close();\n    }, 300);\n  }, [close]);\n  const classes = [css.Main, unmount ? css.unmount : css.mount].join(' ');\n  return __jsx(\"div\", {\n    className: classes\n  }, __jsx(\"div\", {\n    className: css.Backdrop,\n    onClick: closeHandler\n  }), __jsx(\"div\", {\n    className: css.VideoContainer\n  }, __jsx(\"video\", {\n    className: css.Video,\n    src: video_src,\n    controls: true,\n    muted: true,\n    autoPlay: true,\n    playsInline: true\n  })), __jsx(\"div\", {\n    className: css.CloseButton,\n    onClick: closeHandler\n  }, __jsx(FontAwesomeIcon, {\n    icon: icons.faTimes\n  })));\n};\n\nexport default ExpandedVideo;","map":null,"metadata":{},"sourceType":"module"}