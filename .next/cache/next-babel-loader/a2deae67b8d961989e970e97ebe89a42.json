{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport var formTypes;\n\n(function (formTypes) {\n  formTypes[\"ADD\"] = \"add\";\n  formTypes[\"EDIT\"] = \"edit\";\n})(formTypes || (formTypes = {}));\n\nexport var initialForm = {\n  title: {\n    id: 'title',\n    elemType: 'input',\n    type: 'text',\n    placeholder: 'title',\n    require: true,\n    value: ''\n  },\n  description: {\n    id: 'description',\n    elemType: 'textarea',\n    type: 'text',\n    placeholder: 'description',\n    require: true,\n    value: ''\n  },\n  language: {\n    id: 'language',\n    elemType: 'select',\n    options: {\n      React: {\n        selected: false\n      },\n      TypeScript: {\n        selected: false\n      },\n      JavaScript: {\n        selected: false\n      },\n      Cpp: {\n        selected: false\n      },\n      NextJS: {\n        selected: false\n      }\n    },\n    require: true,\n    multiple: true\n  },\n  link: {\n    id: 'link',\n    elemType: 'input',\n    type: 'text',\n    placeholder: 'link to app',\n    require: true,\n    value: ''\n  },\n  github: {\n    id: 'github',\n    elemType: 'input',\n    type: 'text',\n    placeholder: 'github link',\n    require: true,\n    value: ''\n  },\n  video_src: {\n    id: 'video_src',\n    elemType: 'input',\n    type: 'text',\n    placeholder: 'video link',\n    require: true,\n    value: ''\n  },\n  preview_src: {\n    id: 'preview_src',\n    elemType: 'input',\n    type: 'text',\n    placeholder: 'preview video link',\n    require: true,\n    value: ''\n  },\n  gif_src: {\n    id: 'gif_src',\n    elemType: 'input',\n    type: 'text',\n    placeholder: 'gif link',\n    require: true,\n    value: ''\n  },\n  desktop: {\n    id: 'desktop',\n    elemType: 'select',\n    options: {\n      Yes: {\n        selected: false\n      },\n      No: {\n        selected: false\n      }\n    },\n    require: true\n  },\n  mobile: {\n    id: 'mobile',\n    elemType: 'select',\n    options: {\n      Yes: {\n        selected: false\n      },\n      No: {\n        selected: false\n      }\n    },\n    require: true\n  },\n  order: {\n    id: 'order',\n    elemType: 'input',\n    type: 'number',\n    placeholder: 'order in the list',\n    value: ''\n  }\n};\nexport var updateEditForm = function updateEditForm(item) {\n  var updatedForm = _objectSpread({}, initialForm, {\n    title: _objectSpread({}, initialForm.title, {\n      value: item.title\n    }),\n    description: _objectSpread({}, initialForm.description, {\n      value: item.description\n    }),\n    language: _objectSpread({}, initialForm.language, {\n      options: {\n        React: {\n          selected: item.language.includes('React')\n        },\n        TypeScript: {\n          selected: item.language.includes('TypeScript')\n        },\n        JavaScript: {\n          selected: item.language.includes('JavaScript')\n        },\n        Cpp: {\n          selected: item.language.includes('Cpp')\n        },\n        NextJS: {\n          selected: item.language.includes('NextJS')\n        }\n      }\n    }),\n    link: _objectSpread({}, initialForm.link, {\n      value: item.link\n    }),\n    github: _objectSpread({}, initialForm.github, {\n      value: item.githubLink\n    }),\n    video_src: _objectSpread({}, initialForm.video_src, {\n      value: item.video_src\n    }),\n    preview_src: _objectSpread({}, initialForm.preview_src, {\n      value: item.preview_src\n    }),\n    gif_src: _objectSpread({}, initialForm.gif_src, {\n      value: item.gif_src\n    }),\n    desktop: _objectSpread({}, initialForm.desktop, {\n      options: {\n        Yes: {\n          selected: item.desktop\n        },\n        No: {\n          selected: !item.desktop\n        }\n      }\n    }),\n    mobile: _objectSpread({}, initialForm.mobile, {\n      options: {\n        Yes: {\n          selected: item.mobile\n        },\n        No: {\n          selected: !item.mobile\n        }\n      }\n    })\n  });\n\n  return updatedForm;\n};","map":null,"metadata":{},"sourceType":"module"}