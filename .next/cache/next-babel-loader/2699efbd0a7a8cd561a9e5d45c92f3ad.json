{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport { CubeSpinner } from '../../UI/Spinner/Spinner';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { icons } from '../../../icons/icons';\nimport { initialForm, updateEditForm, formTypes } from '../../../form/form';\n\nconst css = require('./ItemForm.module.css');\n\nconst ItemForm = ({\n  show,\n  sending,\n  item,\n  close,\n  add,\n  type\n}) => {\n  const [form, setForm] = React.useState(initialForm);\n  React.useEffect(() => {\n    if (item) {\n      // update each field manually cus we bad\n      const updatedForm = updateEditForm(item);\n      setForm(updatedForm);\n    }\n  }, [item]);\n\n  const optionClickHandler = (id, name) => {\n    let updatedForm = _objectSpread({}, form);\n\n    if (id === 'language') {\n      updatedForm = _objectSpread({}, form, {\n        [id]: _objectSpread({}, form[id], {\n          options: _objectSpread({}, form[id].options, {\n            [name]: _objectSpread({}, form[id].options[name], {\n              selected: !form[id].options[name].selected\n            })\n          })\n        })\n      });\n    } else {\n      updatedForm = _objectSpread({}, form, {\n        [id]: _objectSpread({}, form[id], {\n          options: {\n            Yes: {\n              selected: name === 'Yes'\n            },\n            No: {\n              selected: name === 'No'\n            }\n          }\n        })\n      });\n    }\n\n    setForm(updatedForm);\n  };\n\n  const changeHandler = (id, event) => {\n    let updatedForm = _objectSpread({}, form);\n\n    updatedForm = _objectSpread({}, form, {\n      [id]: _objectSpread({}, form[id], {\n        value: event.target.value\n      })\n    });\n    setForm(updatedForm);\n  };\n\n  const addHandler = () => {\n    let selectedLanguages = _Object$keys(form.language.options).filter(option => form.language.options[option].selected);\n\n    if (selectedLanguages.length === 0) selectedLanguages = ['React'];\n    const newItem = {\n      title: form.title.value,\n      language: selectedLanguages,\n      description: form.description.value,\n      link: form.link.value,\n      githubLink: form.github.value,\n      video_src: form.video_src.value,\n      preview_src: form.preview_src.value,\n      gif_src: form.gif_src.value,\n      desktop: form.desktop.options.Yes.selected,\n      mobile: form.mobile.options.Yes.selected,\n      order: form.order.value\n    };\n    add(newItem);\n  };\n\n  const itemFormStyles = [css.ItemForm, show && css.show].join(' ');\n  const backdropStyles = [css.FormBackdrop, show && css.show].join(' ');\n  return __jsx(React.Fragment, null, __jsx(\"form\", {\n    className: itemFormStyles\n  }, sending && __jsx(\"div\", {\n    className: css.Loading\n  }, __jsx(CubeSpinner, null)), __jsx(FontAwesomeIcon, {\n    className: css.FormCloseButton,\n    icon: icons.faTimes,\n    onClick: close\n  }), _Object$keys(form).map(element => {\n    return __jsx(FormInput, {\n      key: element,\n      type: type,\n      item: form[element],\n      change: changeHandler,\n      clickOption: optionClickHandler\n    });\n  }), __jsx(\"div\", {\n    className: css.FormAddButton,\n    onClick: addHandler\n  }, __jsx(\"p\", null, type))), __jsx(\"div\", {\n    className: backdropStyles\n  }));\n};\n\nconst FormInput = React.memo(({\n  type,\n  item,\n  change,\n  clickOption\n}) => {\n  let content = undefined;\n\n  switch (item.elemType) {\n    case 'input':\n      content = __jsx(\"input\", {\n        value: item.value,\n        disabled: type === formTypes.EDIT && item.id === 'title',\n        placeholder: item.placeholder,\n        onChange: e => change(item.id, e),\n        className: css.FormInput\n      });\n      break;\n\n    case 'textarea':\n      content = __jsx(\"textarea\", {\n        value: item.value,\n        onChange: e => change(item.id, e),\n        placeholder: item.placeholder,\n        className: css.FormInput,\n        rows: 5\n      });\n      break;\n\n    case 'select':\n      content = __jsx(\"div\", {\n        className: css.Select\n      }, _Object$keys(item.options).map(option => {\n        const selected = item.options[option].selected;\n        return __jsx(\"div\", {\n          key: item.id + option,\n          className: [css.Option, selected && css.selected].join(' '),\n          onClick: () => clickOption(item.id, option)\n        }, option);\n      }));\n      break;\n  }\n\n  return __jsx(\"div\", {\n    className: css.FormInputContainer\n  }, __jsx(\"p\", {\n    className: css.FormInputTitle\n  }, item.id), content);\n});\nexport default ItemForm;","map":null,"metadata":{},"sourceType":"module"}