{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport { CubeSpinner } from '../../UI/Spinner/Spinner';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { icons } from '../../../icons/icons';\n\nvar css = require('./ItemForm.module.css');\n\nvar initialForm = {\n  title: {\n    id: 'title',\n    elemType: 'input',\n    type: 'text',\n    placeholder: 'title',\n    require: true,\n    value: ''\n  },\n  description: {\n    id: 'description',\n    elemType: 'textarea',\n    type: 'text',\n    placeholder: 'description',\n    require: true,\n    value: ''\n  },\n  language: {\n    id: 'languages',\n    elemType: 'select',\n    options: {\n      React: {\n        selected: false\n      },\n      TypeScript: {\n        selected: false\n      },\n      JavaScript: {\n        selected: false\n      },\n      Cpp: {\n        selected: false\n      },\n      NextJS: {\n        selected: false\n      }\n    },\n    require: true,\n    multiple: true\n  },\n  link: {\n    id: 'link',\n    elemType: 'input',\n    type: 'text',\n    placeholder: 'link to app',\n    require: true,\n    value: ''\n  },\n  github: {\n    id: 'github',\n    elemType: 'input',\n    type: 'text',\n    placeholder: 'github link',\n    require: true,\n    value: ''\n  },\n  video_src: {\n    id: 'video_src',\n    elemType: 'input',\n    type: 'text',\n    placeholder: 'video link',\n    require: true,\n    value: ''\n  },\n  gif_src: {\n    id: 'gif_src',\n    elemType: 'input',\n    type: 'text',\n    placeholder: 'gif link',\n    require: true,\n    value: ''\n  },\n  desktop: {\n    id: 'desktop',\n    elemType: 'select',\n    options: {\n      Yes: {\n        selected: true\n      },\n      No: {\n        selected: false\n      }\n    },\n    require: true\n  },\n  mobile: {\n    id: 'mobile',\n    elemType: 'select',\n    options: {\n      Yes: {\n        selected: true\n      },\n      No: {\n        selected: false\n      }\n    },\n    require: true\n  }\n};\n\nvar ItemForm = function ItemForm(_ref) {\n  var show = _ref.show,\n      sending = _ref.sending,\n      item = _ref.item,\n      close = _ref.close,\n      add = _ref.add;\n\n  var _React$useState = React.useState(initialForm),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      form = _React$useState2[0],\n      setForm = _React$useState2[1];\n\n  React.useEffect(function () {\n    if (item) {\n      console.log(item);\n\n      var updatedForm = _objectSpread({}, form);\n\n      _Object$keys(item).forEach(function (key) {\n        // console.log(item)\n        updatedForm[key] = _objectSpread({}, updatedForm[key]);\n      });\n    }\n  }, [item]);\n\n  var optionClickHandler = function optionClickHandler(id, name) {\n    var updatedForm = _objectSpread({}, form);\n\n    if (id === 'languages') {\n      updatedForm = _objectSpread({}, form, _defineProperty({}, id, _objectSpread({}, form[id], {\n        options: _objectSpread({}, form[id].options, _defineProperty({}, name, _objectSpread({}, form[id].options[name], {\n          selected: !form[id].options[name].selected\n        })))\n      })));\n    } else {\n      updatedForm = _objectSpread({}, form, _defineProperty({}, id, _objectSpread({}, form[id], {\n        options: {\n          Yes: {\n            selected: name === 'Yes'\n          },\n          No: {\n            selected: name === 'No'\n          }\n        }\n      })));\n    }\n\n    setForm(updatedForm);\n  };\n\n  var changeHandler = function changeHandler(id, event) {\n    var updatedForm = _objectSpread({}, form);\n\n    updatedForm = _objectSpread({}, form, _defineProperty({}, id, _objectSpread({}, form[id], {\n      value: event.target.value\n    })));\n    setForm(updatedForm);\n  };\n\n  var addHandler = function addHandler() {\n    var selectedLanguages = _Object$keys(form.languages.options).filter(function (option) {\n      return form.languages.options[option].selected;\n    });\n\n    var newItem = {\n      title: form.title.value,\n      language: selectedLanguages,\n      description: form.description.value,\n      link: form.link.value,\n      githubLink: form.github.value,\n      video_src: form.video_src.value,\n      gif_src: form.gif_src.value,\n      desktop: form.desktop.options.Yes.selected,\n      mobile: form.mobile.options.Yes.selected\n    };\n    add(newItem);\n  };\n\n  var itemFormStyles = [css.ItemForm, show && css.show].join(' ');\n  var backdropStyles = [css.FormBackdrop, show && css.show].join(' ');\n  return __jsx(React.Fragment, null, __jsx(\"form\", {\n    className: itemFormStyles\n  }, sending && __jsx(\"div\", {\n    className: css.Loading\n  }, __jsx(CubeSpinner, null)), __jsx(FontAwesomeIcon, {\n    className: css.FormCloseButton,\n    icon: icons.faTimes,\n    onClick: close\n  }), _Object$keys(form).map(function (element) {\n    return __jsx(FormInput, {\n      key: element,\n      item: form[element],\n      change: changeHandler,\n      clickOption: optionClickHandler\n    });\n  }), __jsx(\"div\", {\n    className: css.FormAddButton,\n    onClick: addHandler\n  }, __jsx(\"p\", null, \"add\"))), __jsx(\"div\", {\n    className: backdropStyles\n  }));\n};\n\nvar FormInput = React.memo(function (_ref2) {\n  var item = _ref2.item,\n      change = _ref2.change,\n      clickOption = _ref2.clickOption;\n  var content = undefined;\n\n  switch (item.elemType) {\n    case 'input':\n      content = __jsx(\"input\", {\n        value: item.value,\n        placeholder: item.placeholder,\n        onChange: function onChange(e) {\n          return change(item.id, e);\n        },\n        className: css.FormInput\n      });\n      break;\n\n    case 'textarea':\n      content = __jsx(\"textarea\", {\n        value: item.value,\n        onChange: function onChange(e) {\n          return change(item.id, e);\n        },\n        placeholder: item.placeholder,\n        className: css.FormInput,\n        rows: 5\n      });\n      break;\n\n    case 'select':\n      content = __jsx(\"div\", {\n        className: css.Select\n      }, _Object$keys(item.options).map(function (option) {\n        var selected = item.options[option].selected;\n        return __jsx(\"div\", {\n          key: item.id + option,\n          className: [css.Option, selected && css.selected].join(' '),\n          onClick: function onClick() {\n            return clickOption(item.id, option);\n          }\n        }, option);\n      }));\n      break;\n  }\n\n  return __jsx(\"div\", {\n    className: css.FormInputContainer\n  }, __jsx(\"p\", {\n    className: css.FormInputTitle\n  }, item.id), content);\n});\nexport default ItemForm;","map":{"version":3,"sources":["C:/Users/jouna/code/portfolio/components/Admin/ItemForm/ItemForm.tsx"],"names":["React","CubeSpinner","FontAwesomeIcon","icons","css","require","initialForm","title","id","elemType","type","placeholder","value","description","language","options","selected","TypeScript","JavaScript","Cpp","NextJS","multiple","link","github","video_src","gif_src","desktop","Yes","No","mobile","ItemForm","show","sending","item","close","add","useState","form","setForm","useEffect","console","log","updatedForm","forEach","key","optionClickHandler","name","changeHandler","event","target","addHandler","selectedLanguages","languages","filter","option","newItem","githubLink","itemFormStyles","join","backdropStyles","FormBackdrop","Loading","FormCloseButton","faTimes","map","element","FormAddButton","FormInput","memo","change","clickOption","content","undefined","e","Select","Option","FormInputContainer","FormInputTitle"],"mappings":"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","sourcesContent":["import * as React from 'react'\r\n\r\nimport { IPortfolioItem } from '../../../interfaces/interfaces'\r\nimport { CubeSpinner } from '../../UI/Spinner/Spinner'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { icons } from '../../../icons/icons'\r\n\r\nconst css = require('./ItemForm.module.css')\r\n\r\ninterface IForm {\r\n    [title: string]: any\r\n    description: any\r\n    language: any\r\n    link: any\r\n    github: any\r\n    video_src: any\r\n    gif_src: any\r\n    desktop: any\r\n    mobile: any\r\n}\r\n\r\nconst initialForm: IForm = {\r\n    title: {\r\n        id: 'title',\r\n        elemType: 'input',\r\n        type: 'text',\r\n        placeholder: 'title',\r\n        require: true,\r\n        value: '',\r\n    },\r\n    description: {\r\n        id: 'description',\r\n        elemType: 'textarea',\r\n        type: 'text',\r\n        placeholder: 'description',\r\n        require: true,\r\n        value: '',\r\n    },\r\n    language: {\r\n        id: 'languages',\r\n        elemType: 'select',\r\n        options: {\r\n            React: {\r\n                selected: false,\r\n            },\r\n            TypeScript: {\r\n                selected: false,\r\n            },\r\n            JavaScript: {\r\n                selected: false,\r\n            },\r\n            Cpp: {\r\n                selected: false\r\n            },\r\n            NextJS: {\r\n                selected: false\r\n            }\r\n        },\r\n        require: true,\r\n        multiple: true\r\n    },\r\n    link: {\r\n        id: 'link',\r\n        elemType: 'input',\r\n        type: 'text',\r\n        placeholder: 'link to app',\r\n        require: true,\r\n        value: '',\r\n    },\r\n    github: {\r\n        id: 'github',\r\n        elemType: 'input',\r\n        type: 'text',\r\n        placeholder: 'github link',\r\n        require: true,\r\n        value: '',\r\n    },\r\n    video_src: {\r\n        id: 'video_src',\r\n        elemType: 'input',  \r\n        type: 'text',\r\n        placeholder: 'video link',\r\n        require: true,\r\n        value: '',\r\n    },\r\n    gif_src: {\r\n        id: 'gif_src',\r\n        elemType: 'input',\r\n        type: 'text',\r\n        placeholder: 'gif link',\r\n        require: true,\r\n        value: '',\r\n    },\r\n    desktop: {\r\n        id: 'desktop',\r\n        elemType: 'select',\r\n        options : {\r\n            Yes: {\r\n                selected: true,\r\n            },\r\n            No: {\r\n                selected: false\r\n            },\r\n        },        \r\n        require: true,\r\n    },\r\n    mobile: {   \r\n        id: 'mobile',\r\n        elemType: 'select',\r\n        options : {\r\n            Yes: {\r\n                selected: true,\r\n            },\r\n            No: {\r\n                selected: false\r\n            },\r\n        }, \r\n        require: true,\r\n    }\r\n}\r\n\r\ninterface IItemForm {\r\n    show: boolean\r\n    sending: boolean\r\n    item?: IPortfolioItem\r\n    type: string\r\n    close(): void\r\n    add(item: IPortfolioItem): void\r\n}\r\n\r\nconst ItemForm: React.FunctionComponent<IItemForm> = ({ show, sending, item, close, add }): JSX.Element => {\r\n    const [form, setForm] = React.useState<IForm>(initialForm)\r\n\r\n    React.useEffect(() => {\r\n        if (item) {\r\n            console.log(item)\r\n            let updatedForm: IForm = { ...form }\r\n            Object.keys(item).forEach((key: string) => {\r\n                // console.log(item)\r\n                updatedForm[key] = {\r\n                    ...updatedForm[key],\r\n                    // value: item\r\n                }\r\n            })            \r\n        }   \r\n    }, [item])\r\n\r\n    const optionClickHandler = (id: string, name: string) => {\r\n        let updatedForm: IForm = { ...form }\r\n        if (id === 'languages') {\r\n            updatedForm = {\r\n                ...form,\r\n                [id]: {\r\n                    ...form[id],\r\n                    options: {\r\n                        ...form[id].options,\r\n                        [name]: {\r\n                            ...form[id].options[name],\r\n                            selected: !form[id].options[name].selected,\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            updatedForm = {\r\n                ...form,\r\n                [id]: {\r\n                    ...form[id],\r\n                    options: {\r\n                        Yes: {\r\n                            selected: name === 'Yes',\r\n                        },\r\n                        No: {\r\n                            selected: name === 'No',\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        setForm(updatedForm)\r\n    }\r\n\r\n    const changeHandler = (id: string, event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\r\n        let updatedForm: IForm = { ...form }\r\n        updatedForm = {\r\n            ...form,\r\n            [id]: {\r\n                ...form[id],\r\n                value: event.target.value\r\n            }\r\n        }\r\n        setForm(updatedForm)\r\n    }\r\n\r\n    const addHandler = () => {\r\n        const selectedLanguages = Object.keys(form.languages.options).filter(option => form.languages.options[option].selected)\r\n\r\n        const newItem: IPortfolioItem = {\r\n            title: form.title.value,\r\n            language: selectedLanguages,\r\n            description: form.description.value,\r\n            link: form.link.value,\r\n            githubLink: form.github.value,\r\n            video_src: form.video_src.value,\r\n            gif_src: form.gif_src.value,\r\n            desktop: form.desktop.options.Yes.selected,\r\n            mobile: form.mobile.options.Yes.selected,\r\n        }\r\n        add(newItem)\r\n    }\r\n    \r\n    const itemFormStyles = [\r\n        css.ItemForm,\r\n        show && css.show\r\n    ].join(' ')\r\n\r\n    const backdropStyles = [\r\n        css.FormBackdrop,\r\n        show && css.show\r\n    ].join(' ')\r\n\r\n    return (\r\n        <>\r\n            <form className={itemFormStyles}>\r\n                { sending && \r\n                    <div className={css.Loading}>\r\n                        <CubeSpinner />\r\n                    </div>\r\n                }\r\n                <FontAwesomeIcon className={css.FormCloseButton} icon={icons.faTimes} onClick={close} />\r\n                { Object.keys(form).map((element: string) => {\r\n                    return (\r\n                        <FormInput key={element} item={form[element]} change={changeHandler} clickOption={optionClickHandler} />\r\n                    )\r\n                })}\r\n                <div className={css.FormAddButton} onClick={addHandler}>\r\n                    <p>add</p>\r\n                </div>\r\n            </form>\r\n            <div className={backdropStyles}></div>\r\n        </>\r\n    )\r\n}\r\n\r\ninterface IFormInput {\r\n    item: any\r\n    change: (id: string, e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => void\r\n    clickOption: (id: string, name: string) => void\r\n}\r\n\r\nconst FormInput: React.FunctionComponent<IFormInput> = React.memo( ({ item, change, clickOption }): JSX.Element => {\r\n    let content = undefined\r\n\r\n    switch (item.elemType) {\r\n        case 'input':\r\n            content = (\r\n                <input value={item.value} \r\n                    placeholder={item.placeholder} \r\n                    onChange={(e) => change(item.id, e)}\r\n                    className={css.FormInput} />\r\n            )\r\n            break;\r\n\r\n        case 'textarea':\r\n            content = (\r\n                <textarea value={item.value}\r\n                    onChange={(e) => change(item.id, e)}\r\n                    placeholder={item.placeholder} \r\n                    className={css.FormInput}\r\n                    rows={5} />\r\n            )\r\n            break;\r\n            \r\n        case 'select':\r\n            content = (\r\n                <div className={css.Select}>\r\n                    { Object.keys(item.options).map((option: any) => {\r\n                        const selected: boolean = item.options[option].selected\r\n                        return (\r\n                            <div key={item.id + option} \r\n                                className={[css.Option, selected && css.selected].join(' ')} \r\n                                onClick={() => clickOption(item.id, option)}>{option}</div>\r\n                        )\r\n                    })}\r\n                </div>\r\n            )\r\n            break;\r\n    }\r\n\r\n    return (\r\n        <div className={css.FormInputContainer}>\r\n            <p className={css.FormInputTitle}>{item.id}</p>\r\n            { content }\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default ItemForm"]},"metadata":{},"sourceType":"module"}