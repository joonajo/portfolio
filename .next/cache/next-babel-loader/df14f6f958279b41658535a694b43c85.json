{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport { Languages } from '../../../context/portfolioContext';\nimport { CubeSpinner } from '../../UI/Spinner/Spinner';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { icons } from '../../../icons/icons';\n\nconst css = require('./ItemForm.module.css');\n\nconst initialForm = {\n  title: {\n    id: 'title',\n    elemType: 'input',\n    type: 'text',\n    placeholder: 'title',\n    require: true,\n    value: ''\n  },\n  description: {\n    id: 'description',\n    elemType: 'textarea',\n    type: 'text',\n    placeholder: 'description',\n    require: true,\n    value: ''\n  },\n  languages: {\n    id: 'languages',\n    elemType: 'select',\n    options: [..._Object$keys(Languages).map(language => {\n      return {\n        name: language,\n        selected: false\n      };\n    })],\n    selected: [],\n    require: true,\n    multiple: true\n  },\n  link: {\n    id: 'link',\n    elemType: 'input',\n    type: 'text',\n    placeholder: 'link to app',\n    require: true,\n    value: ''\n  },\n  github: {\n    id: 'github',\n    elemType: 'input',\n    type: 'text',\n    placeholder: 'github link',\n    require: true,\n    value: ''\n  },\n  video_src: {\n    id: 'video_src',\n    elemType: 'input',\n    type: 'text',\n    placeholder: 'video link',\n    require: true,\n    value: ''\n  },\n  gif_src: {\n    id: 'gif_src',\n    elemType: 'input',\n    type: 'text',\n    placeholder: 'gif link',\n    require: true,\n    value: ''\n  },\n  desktop: {\n    id: 'desktop',\n    elemType: 'select',\n    options: ['Yes', 'No'],\n    require: true,\n    value: 'Yes',\n    multiple: false\n  },\n  mobile: {\n    id: 'mobile',\n    elemType: 'select',\n    options: ['Yes', 'No'],\n    require: true,\n    value: 'Yes',\n    multiple: false\n  }\n};\n\nconst NewItemForm = ({\n  show,\n  close,\n  add,\n  sending\n}) => {\n  const [form, setForm] = React.useState(initialForm);\n\n  const changeHandler = (id, event) => {\n    let updatedForm = _objectSpread({}, form);\n\n    if (id === 'languages') {\n      let updatedSelectedOptions = [...form[id].selected];\n      if (updatedSelectedOptions.includes(event.target.value)) updatedSelectedOptions = updatedSelectedOptions.filter(option => option !== event.target.value);else updatedSelectedOptions.push(event.target.value);\n      updatedForm = _objectSpread({}, form, {\n        [id]: _objectSpread({}, form[id], {\n          selected: updatedSelectedOptions\n        })\n      });\n    } else {\n      updatedForm = _objectSpread({}, form, {\n        [id]: _objectSpread({}, form[id], {\n          value: event.target.value\n        })\n      });\n    }\n\n    setForm(updatedForm);\n  };\n\n  const addHandler = () => {\n    const newItem = {\n      title: form.title.value,\n      language: [...form.languages.selected],\n      description: form.description.value,\n      link: form.link.value,\n      githubLink: form.github.value,\n      video_src: form.video_src.value,\n      gif_src: form.gif_src.value,\n      desktop: form.desktop.value === 'Yes',\n      mobile: form.mobile.value === 'Yes,'\n    };\n    add(newItem);\n  };\n\n  const itemFormStyles = [css.ItemForm, show && css.show].join(' ');\n  const backdropStyles = [css.FormBackdrop, show && css.show].join(' ');\n  return __jsx(React.Fragment, null, __jsx(\"form\", {\n    className: itemFormStyles\n  }, sending && __jsx(\"div\", {\n    className: css.Loading\n  }, __jsx(CubeSpinner, null)), __jsx(FontAwesomeIcon, {\n    className: css.FormCloseButton,\n    icon: icons.faTimes,\n    onClick: close\n  }), _Object$keys(form).map(element => {\n    return __jsx(FormInput, {\n      key: element,\n      item: form[element],\n      change: changeHandler\n    });\n  }), __jsx(\"div\", {\n    className: css.FormAddButton,\n    onClick: addHandler\n  }, __jsx(\"p\", null, \"add\"))), __jsx(\"div\", {\n    className: backdropStyles\n  }));\n};\n\nconst FormInput = React.memo(({\n  item,\n  change\n}) => {\n  let content = undefined;\n\n  switch (item.elemType) {\n    case 'input':\n      content = __jsx(\"input\", {\n        value: item.value,\n        placeholder: item.placeholder,\n        onChange: e => change(item.id, e),\n        className: css.FormInput\n      });\n      break;\n\n    case 'textarea':\n      content = __jsx(\"textarea\", {\n        value: item.value,\n        onChange: e => change(item.id, e),\n        placeholder: item.placeholder,\n        className: css.FormInput,\n        rows: 5\n      });\n      break;\n\n    case 'select':\n      content = __jsx(\"div\", null, item.options.map(option => {}));\n      content = __jsx(\"select\", {\n        className: css.FormSelect,\n        onChange: e => change(item.id, e),\n        id: item.id,\n        multiple: item.multiple\n      }, item.options.map(option => {\n        var _item$selected;\n\n        return __jsx(\"option\", {\n          key: item.id + option,\n          value: option,\n          className: [css.SelectOption, ((_item$selected = item.selected) === null || _item$selected === void 0 ? void 0 : _item$selected.includes(option)) && css.selected].join(' ')\n        }, option);\n      }));\n      break;\n  }\n\n  return __jsx(\"div\", {\n    className: css.FormInputContainer\n  }, __jsx(\"p\", null, item.id), content);\n});\nexport default NewItemForm;","map":{"version":3,"sources":["C:/Users/jouna/code/portfolio/components/Admin/ItemForm/ItemForm.tsx"],"names":["React","Languages","CubeSpinner","FontAwesomeIcon","icons","css","require","initialForm","title","id","elemType","type","placeholder","value","description","languages","options","map","language","name","selected","multiple","link","github","video_src","gif_src","desktop","mobile","NewItemForm","show","close","add","sending","form","setForm","useState","changeHandler","event","updatedForm","updatedSelectedOptions","includes","target","filter","option","push","addHandler","newItem","githubLink","itemFormStyles","ItemForm","join","backdropStyles","FormBackdrop","Loading","FormCloseButton","faTimes","element","FormAddButton","FormInput","memo","item","change","content","undefined","e","FormSelect","SelectOption","FormInputContainer"],"mappings":"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","sourcesContent":["import * as React from 'react'\r\n\r\nimport { Languages, IPortfolioContext, PortfolioContext, TPortfolioActionTypes } from '../../../context/portfolioContext'\r\nimport { IPortfolioItem } from '../../../interfaces/interfaces'\r\nimport { CubeSpinner } from '../../UI/Spinner/Spinner'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { icons } from '../../../icons/icons'\r\n\r\nconst css = require('./ItemForm.module.css')\r\n\r\ninterface IForm {\r\n    [title: string]: any\r\n    description: any\r\n    languages: any\r\n    link: any\r\n    github: any\r\n    video_src: any\r\n    gif_src: any\r\n    desktop: any\r\n    mobile: any\r\n}\r\n\r\nconst initialForm: IForm = {\r\n    title: {\r\n        id: 'title',\r\n        elemType: 'input',\r\n        type: 'text',\r\n        placeholder: 'title',\r\n        require: true,\r\n        value: '',\r\n    },\r\n    description: {\r\n        id: 'description',\r\n        elemType: 'textarea',\r\n        type: 'text',\r\n        placeholder: 'description',\r\n        require: true,\r\n        value: '',\r\n    },\r\n    languages: {\r\n        id: 'languages',\r\n        elemType: 'select',\r\n        options: [...Object.keys(Languages).map(language => {\r\n            return {\r\n                name: language,\r\n                selected: false\r\n            }\r\n        })],\r\n        selected: [],\r\n        require: true,\r\n        multiple: true\r\n    },\r\n    link: {\r\n        id: 'link',\r\n        elemType: 'input',\r\n        type: 'text',\r\n        placeholder: 'link to app',\r\n        require: true,\r\n        value: '',\r\n    },\r\n    github: {\r\n        id: 'github',\r\n        elemType: 'input',\r\n        type: 'text',\r\n        placeholder: 'github link',\r\n        require: true,\r\n        value: '',\r\n    },\r\n    video_src: {\r\n        id: 'video_src',\r\n        elemType: 'input',  \r\n        type: 'text',\r\n        placeholder: 'video link',\r\n        require: true,\r\n        value: '',\r\n    },\r\n    gif_src: {\r\n        id: 'gif_src',\r\n        elemType: 'input',\r\n        type: 'text',\r\n        placeholder: 'gif link',\r\n        require: true,\r\n        value: '',\r\n    },\r\n    desktop: {\r\n        id: 'desktop',\r\n        elemType: 'select',\r\n        options : ['Yes', 'No'],\r\n        require: true,\r\n        value: 'Yes',\r\n        multiple: false\r\n    },\r\n    mobile: {   \r\n        id: 'mobile',\r\n        elemType: 'select',\r\n        options : ['Yes', 'No'],\r\n        require: true,\r\n        value: 'Yes',\r\n        multiple: false\r\n    }\r\n}\r\n\r\ninterface INewItemForm {\r\n    show: boolean\r\n    sending: boolean\r\n    close: () => void\r\n    add: (item: IPortfolioItem) => void\r\n}\r\n\r\nconst NewItemForm: React.FunctionComponent<INewItemForm> = ({ show, close, add, sending }): JSX.Element => {\r\n    const [form, setForm] = React.useState<IForm>(initialForm)\r\n\r\n    const changeHandler = (id: string, event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\r\n        let updatedForm: IForm = { ...form }\r\n        if (id === 'languages') {\r\n            let updatedSelectedOptions: string[] = [...form[id].selected]\r\n            if (updatedSelectedOptions.includes(event.target.value)) updatedSelectedOptions = updatedSelectedOptions.filter(option => option !== event.target.value)\r\n            else updatedSelectedOptions.push(event.target.value)\r\n            updatedForm = {\r\n                ...form,\r\n                [id]: {\r\n                    ...form[id],\r\n                    selected: updatedSelectedOptions\r\n                }\r\n            }\r\n        } else {\r\n            updatedForm = {\r\n                ...form,\r\n                [id]: {\r\n                    ...form[id],\r\n                    value: event.target.value\r\n                }\r\n            }\r\n        }\r\n        setForm(updatedForm)\r\n    }\r\n\r\n    const addHandler = () => {\r\n        const newItem: IPortfolioItem = {\r\n            title: form.title.value,\r\n            language: [...form.languages.selected],\r\n            description: form.description.value,\r\n            link: form.link.value,\r\n            githubLink: form.github.value,\r\n            video_src: form.video_src.value,\r\n            gif_src: form.gif_src.value,\r\n            desktop: form.desktop.value === 'Yes',\r\n            mobile: form.mobile.value === 'Yes,'\r\n        }\r\n        add(newItem)\r\n    }\r\n    \r\n    const itemFormStyles = [\r\n        css.ItemForm,\r\n        show && css.show\r\n    ].join(' ')\r\n\r\n    const backdropStyles = [\r\n        css.FormBackdrop,\r\n        show && css.show\r\n    ].join(' ')\r\n\r\n    return (\r\n        <>\r\n            <form className={itemFormStyles}>\r\n                { sending && \r\n                    <div className={css.Loading}>\r\n                        <CubeSpinner />\r\n                    </div>\r\n                }\r\n                <FontAwesomeIcon className={css.FormCloseButton} icon={icons.faTimes} onClick={close} />\r\n                { Object.keys(form).map((element: string) => {\r\n                    return (\r\n                        <FormInput key={element} item={form[element]} change={changeHandler}  />\r\n                    )\r\n                })}\r\n                <div className={css.FormAddButton} onClick={addHandler}>\r\n                    <p>add</p>\r\n                </div>\r\n            </form>\r\n            <div className={backdropStyles}></div>\r\n        </>\r\n    )\r\n}\r\n\r\ninterface IFormInput {\r\n    item: any\r\n    change: (id: string, e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => void\r\n}\r\n\r\nconst FormInput: React.FunctionComponent<IFormInput> = React.memo( ({ item, change }): JSX.Element => {\r\n    let content = undefined\r\n\r\n    switch (item.elemType) {\r\n        case 'input':\r\n            content = (\r\n                <input value={item.value} \r\n                    placeholder={item.placeholder} \r\n                    onChange={(e) => change(item.id, e)}\r\n                    className={css.FormInput} />\r\n            )\r\n            break;\r\n\r\n        case 'textarea':\r\n            content = (\r\n                <textarea value={item.value}\r\n                    onChange={(e) => change(item.id, e)}\r\n                    placeholder={item.placeholder} \r\n                    className={css.FormInput}\r\n                    rows={5} />\r\n            )\r\n            break;\r\n            \r\n        case 'select':\r\n            content = (\r\n                <div>\r\n                    { item.options.map((option: string) => {\r\n\r\n                    })}\r\n                </div>\r\n            )\r\n            content = (\r\n                <select className={css.FormSelect} onChange={(e) => change(item.id, e)} id={item.id} multiple={item.multiple}>\r\n                    {item.options.map((option: string) => {\r\n                        return (\r\n                            <option key={item.id + option} value={option} className={[css.SelectOption, item.selected?.includes(option) && css.selected].join(' ')}>{option}</option>\r\n                        )\r\n                    })}\r\n                </select>\r\n            )\r\n            break;\r\n    }\r\n\r\n    return (\r\n        <div className={css.FormInputContainer}>\r\n            <p>{item.id}</p>\r\n            { content }\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default NewItemForm"]},"metadata":{},"sourceType":"module"}