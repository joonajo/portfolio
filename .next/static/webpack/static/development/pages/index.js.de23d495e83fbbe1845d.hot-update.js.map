{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.de23d495e83fbbe1845d.hot-update.js","sources":["webpack:///./context/portfolioContext.tsx"],"sourcesContent":["import React from 'react'\r\nimport { IPortfolioItem } from '../interfaces/interfaces'\r\nimport { TDispatch } from './authContext'\r\n\r\nexport type TPortfolioState = {\r\n    items: IPortfolioItem[]\r\n    success?: boolean\r\n}\r\n\r\nexport const Languages = {\r\n    React: 'React',\r\n    TypeScript: 'TypeScript',\r\n    JavaScript: 'JavaScript',\r\n    Cpp: 'C++',\r\n    NextJS: 'NextJS',\r\n}\r\n\r\nexport enum TPortfolioActionTypes {\r\n    FETCH_ITEMS = \"FETCH_ITEMS\",\r\n    SET_ITEMS = \"SET_ITEMS\",\r\n    EDIT_ITEM = \"EDIT_ITEM\",\r\n    DELETE_ITEM = \"DELETE_ITEM\",\r\n    ADD_ITEM = \"ADD_ITEM\"\r\n}\r\n\r\nexport type TPortfolioActions = \r\n| ({ type: TPortfolioActionTypes.FETCH_ITEMS })\r\n| ({ type: TPortfolioActionTypes.SET_ITEMS, payload: IPortfolioItem[] })\r\n| ({ type: TPortfolioActionTypes.DELETE_ITEM, payload: string })\r\n| ({ type: TPortfolioActionTypes.EDIT_ITEM, payload: string })\r\n| ({ type: TPortfolioActionTypes.ADD_ITEM, payload: IPortfolioItem })\r\n\r\nexport const initialPortfolioState: TPortfolioState = {\r\n    items: []\r\n}\r\n\r\nconst fetchItems = (state: TPortfolioState, action: TPortfolioActions): TPortfolioState => {\r\n    if (action.type !== TPortfolioActionTypes.FETCH_ITEMS) return { ...state }\r\n\r\n    console.log('fetch')\r\n\r\n    const baseURL: string = 'https://joonajo-portfolio.firebaseio.com/items.json'\r\n\r\n    const newItems: IPortfolioItem[] = []\r\n    \r\n    fetch(baseURL, { method: 'get' }).then(response => response.json())\r\n        .then(data => {\r\n            if (data) {\r\n                Object.keys(data).forEach(item => {\r\n                    newItems.push(data[item])\r\n                })\r\n            }\r\n            console.log(newItems)\r\n        })\r\n    return {\r\n        ...state\r\n    }\r\n}\r\n\r\nconst setItems = (state: TPortfolioState, action: TPortfolioActions): TPortfolioState => {\r\n    if (action.type !== TPortfolioActionTypes.SET_ITEMS) return { ...state }\r\n\r\n    return {\r\n        ...state,\r\n        items: action.payload\r\n    }\r\n}\r\n\r\nconst addItem = (state: TPortfolioState, action: TPortfolioActions): TPortfolioState => {\r\n    if (action.type !== TPortfolioActionTypes.ADD_ITEM) return { ...state }\r\n\r\n    const updatedItems: IPortfolioItem[] = [...state.items]\r\n    updatedItems.push(action.payload)\r\n\r\n    return {\r\n        ...state,\r\n        items: updatedItems\r\n    }\r\n}\r\n\r\nconst deleteItem = (state: TPortfolioState, action: TPortfolioActions): TPortfolioState => {\r\n    if (action.type !== TPortfolioActionTypes.DELETE_ITEM) return { ...state }\r\n\r\n    const updatedItems: IPortfolioItem[] = [...state.items].filter(item => item.title !== action.payload)\r\n\r\n    return {\r\n        ...state,\r\n        items: updatedItems\r\n    }\r\n}\r\n\r\nconst editItem = (state: TPortfolioState, action: TPortfolioActions): TPortfolioState => {\r\n    if (action.type !== TPortfolioActionTypes.EDIT_ITEM) return { ...state }\r\n\r\n    return {\r\n        ...state,\r\n    }\r\n}\r\n\r\nexport const portfolioReducer = (state: TPortfolioState = initialPortfolioState, action: TPortfolioActions): TPortfolioState => {\r\n    switch (action.type) {\r\n        case TPortfolioActionTypes.FETCH_ITEMS:\r\n            return fetchItems(state, action)\r\n\r\n        case TPortfolioActionTypes.SET_ITEMS:\r\n            return setItems(state, action)\r\n\r\n        case TPortfolioActionTypes.DELETE_ITEM:\r\n            return deleteItem(state, action)\r\n\r\n        case TPortfolioActionTypes.EDIT_ITEM:\r\n            return editItem(state, action)\r\n    \r\n        case TPortfolioActionTypes.ADD_ITEM:\r\n            return addItem(state, action)\r\n            \r\n        default:\r\n            return { ...state }\r\n    }\r\n}\r\n\r\nexport interface IPortfolioContext {\r\n    state: TPortfolioState,\r\n    dispatch?: TDispatch\r\n}\r\n\r\nexport const PortfolioContext = React.createContext<IPortfolioContext>({ state: initialPortfolioState })\r\n\r\ninterface IPortfolioProvider {\r\n    children: any\r\n}\r\n\r\nexport const PortfolioProvider: React.FunctionComponent<IPortfolioProvider> = ({ children }) => {\r\n    const[state, dispatch] = React.useReducer(portfolioReducer, initialPortfolioState)\r\n\r\n    return (\r\n        <PortfolioContext.Provider value={{state, dispatch}}>\r\n            {children}\r\n        </PortfolioContext.Provider>\r\n    )\r\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAcA;AACA;AADA;AACA;AAGA;AACA;AAEA;AAEA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AAFA;AAIA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAmBA;AAOA;AAAA;AAAA;AAMA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;A","sourceRoot":""}