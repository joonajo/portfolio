{"version":3,"file":"static/webpack/static\\development\\pages\\admin.js.f8aeff9de16546113753.hot-update.js","sources":["webpack:///./containers/Admin/Admin.tsx"],"sourcesContent":["import * as React from 'react'\r\n\r\nimport Auth from '../../containers/Auth/Auth'\r\nimport { CubeSpinner } from '../../components/UI/Spinner/Spinner'\r\nimport { IPortfolioItem } from '../../interfaces/interfaces'\r\nimport { IAuthContext, AuthContext, TAuthState, TDispatch } from '../../context/authContext'\r\nimport { Languages, IPortfolioContext, PortfolioContext, TPortfolioState, TPortfolioActionTypes } from '../../context/portfolioContext'\r\nimport PortfolioItems from '../../components/Admin/PortfolioManagement/Portfolio'\r\nimport Loading from '../../components/UI/Loading/Loading'\r\n\r\nconst css = require('./Admin.module.css')\r\n\r\nconst Admin: React.FunctionComponent = (): JSX.Element => {\r\n    const authContext: IAuthContext = React.useContext(AuthContext)\r\n    const authState: TAuthState = authContext.state\r\n    const authDispatch: TDispatch = authContext.dispatch!\r\n\r\n    const [sending, setSending] = React.useState<boolean>(true)\r\n    const [screensize, setScreensize] = React.useState<{ width: number, height: number}>()\r\n\r\n    React.useEffect(() => {\r\n        document.title = 'Portfolio // Admin'\r\n\r\n        setScreensize({\r\n            width: window.innerWidth,\r\n            height: window.innerHeight\r\n        })\r\n\r\n        if (localStorage.length !== 0) {\r\n            // check for auth info in local storage\r\n            // compare current time in milliseconds to expire time in storage\r\n            // if current time is LESS, use the auth info from storage to refresh\r\n            // else, clear local storage\r\n            const expireTime = (localStorage.getItem('expireTime'))\r\n            if (expireTime) {\r\n                // if auth token has not expired yet\r\n                if (new Date().getTime() < +expireTime) {\r\n                    const authInfo = {\r\n                        email: localStorage.getItem('email')!,\r\n                        password: localStorage.getItem('password')!,\r\n                        idToken: localStorage.getItem('idToken')!\r\n                    }\r\n                    authDispatch({ type: 'signin', payload: authInfo })\r\n                    setSending(false)\r\n                // if auth has expired\r\n                } else {\r\n                    localStorage.clear()\r\n                    setSending(false)\r\n                }\r\n            }\r\n        } else {\r\n            setSending(false)\r\n        }\r\n    }, [])\r\n\r\n    const signInHandler = (email: string, password: string, idToken: string) => {\r\n        const authInfo = {\r\n            email: email,\r\n            password: password,\r\n            idToken: idToken\r\n        }\r\n        authDispatch({ type: 'signin', payload: authInfo })\r\n    }\r\n\r\n    return (\r\n        <div className={css.Main} style={{minHeight: `${screensize?.height}px`, minWidth: `${screensize?.width}px`}}>\r\n            { !authState.signedIn && <Auth setSending={setSending} signIn={signInHandler} /> }\r\n            { authState. signedIn && <AdminContent token={authState.idToken!} /> }\r\n            <Loading show={sending} />\r\n        </div>\r\n    )\r\n}\r\n\r\ninterface IAdminContent {\r\n    token: string\r\n}\r\n\r\nconst AdminContent: React.FunctionComponent<IAdminContent> = (): JSX.Element => {\r\n    const portfolioContext: IPortfolioContext = React.useContext(PortfolioContext)\r\n    const portfolioState: TPortfolioState = portfolioContext.state\r\n    const portfolioDispatch: TDispatch = portfolioContext.dispatch!\r\n\r\n    const [loading, setLoading] = React.useState<boolean>(true)\r\n\r\n    React.useEffect(() => {\r\n        if (portfolioState.items.length === 0) {\r\n            const baseURL: string = 'https://joonajo-portfolio.firebaseio.com/items.json'\r\n\r\n            const newItems: IPortfolioItem[] = []\r\n            \r\n            fetch(baseURL, { method: 'get' }).then(response => response.json())\r\n                .then(data => {\r\n                    if (data) {\r\n                        Object.keys(data).forEach(item => {\r\n                            newItems.push(data[item])\r\n                        })\r\n                        portfolioDispatch({ type: TPortfolioActionTypes.SET_ITEMS, payload: newItems })\r\n                    }\r\n                    setLoading(false)\r\n                })\r\n        } else {\r\n            setLoading(false)\r\n        }\r\n    }, [portfolioState.items])\r\n   \r\n    return (\r\n        <div className={css.AdminContentWrapper}>\r\n            { !loading && <PortfolioItems items={portfolioState.items} /> }\r\n            <Loading show={loading} transparent fadeout /> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Admin\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AAEA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AAKA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AACA;AAMA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;A","sourceRoot":""}