{"version":3,"file":"static/webpack/static\\development\\pages\\admin.js.5fe82c8f8226f872d4f7.hot-update.js","sources":["webpack:///./components/Admin/ItemForm/ItemForm.tsx"],"sourcesContent":["import * as React from 'react'\r\n\r\nimport { IPortfolioItem } from '../../../interfaces/interfaces'\r\nimport { CubeSpinner } from '../../UI/Spinner/Spinner'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { icons } from '../../../icons/icons'\r\n\r\nconst css = require('./ItemForm.module.css')\r\n\r\ninterface IForm {\r\n    [title: string]: any\r\n    description: any\r\n    languages: any\r\n    link: any\r\n    github: any\r\n    video_src: any\r\n    gif_src: any\r\n    desktop: any\r\n    mobile: any\r\n}\r\n\r\nconst initialForm: IForm = {\r\n    title: {\r\n        id: 'title',\r\n        elemType: 'input',\r\n        type: 'text',\r\n        placeholder: 'title',\r\n        require: true,\r\n        value: '',\r\n    },\r\n    description: {\r\n        id: 'description',\r\n        elemType: 'textarea',\r\n        type: 'text',\r\n        placeholder: 'description',\r\n        require: true,\r\n        value: '',\r\n    },\r\n    languages: {\r\n        id: 'languages',\r\n        elemType: 'select',\r\n        options: {\r\n            React: {\r\n                selected: false,\r\n            },\r\n            TypeScript: {\r\n                selected: false,\r\n            },\r\n            JavaScript: {\r\n                selected: false,\r\n            },\r\n            Cpp: {\r\n                selected: false\r\n            },\r\n            NextJS: {\r\n                selected: false\r\n            }\r\n        },\r\n        require: true,\r\n        multiple: true\r\n    },\r\n    link: {\r\n        id: 'link',\r\n        elemType: 'input',\r\n        type: 'text',\r\n        placeholder: 'link to app',\r\n        require: true,\r\n        value: '',\r\n    },\r\n    github: {\r\n        id: 'github',\r\n        elemType: 'input',\r\n        type: 'text',\r\n        placeholder: 'github link',\r\n        require: true,\r\n        value: '',\r\n    },\r\n    video_src: {\r\n        id: 'video_src',\r\n        elemType: 'input',  \r\n        type: 'text',\r\n        placeholder: 'video link',\r\n        require: true,\r\n        value: '',\r\n    },\r\n    gif_src: {\r\n        id: 'gif_src',\r\n        elemType: 'input',\r\n        type: 'text',\r\n        placeholder: 'gif link',\r\n        require: true,\r\n        value: '',\r\n    },\r\n    desktop: {\r\n        id: 'desktop',\r\n        elemType: 'select',\r\n        options : {\r\n            Yes: {\r\n                selected: true,\r\n            },\r\n            No: {\r\n                selected: false\r\n            },\r\n        },        \r\n        require: true,\r\n    },\r\n    mobile: {   \r\n        id: 'mobile',\r\n        elemType: 'select',\r\n        options : {\r\n            Yes: {\r\n                selected: true,\r\n            },\r\n            No: {\r\n                selected: false\r\n            },\r\n        }, \r\n        require: true,\r\n    }\r\n}\r\n\r\ninterface IItemForm {\r\n    show: boolean\r\n    sending: boolean\r\n    item?: IPortfolioItem\r\n    close: () => void\r\n    add: (item: IPortfolioItem) => void\r\n}\r\n\r\nconst ItemForm: React.FunctionComponent<IItemForm> = ({ show, sending, item, close, add }): JSX.Element => {\r\n    const [form, setForm] = React.useState<IForm>(initialForm)\r\n\r\n    React.useEffect(() => {\r\n        if (item) {\r\n            console.log('itetietiet')\r\n        }\r\n    }, [item])\r\n\r\n    const optionClickHandler = (id: string, name: string) => {\r\n        let updatedForm: IForm = { ...form }\r\n        if (id === 'languages') {\r\n            updatedForm = {\r\n                ...form,\r\n                [id]: {\r\n                    ...form[id],\r\n                    options: {\r\n                        ...form[id].options,\r\n                        [name]: {\r\n                            ...form[id].options[name],\r\n                            selected: !form[id].options[name].selected,\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            updatedForm = {\r\n                ...form,\r\n                [id]: {\r\n                    ...form[id],\r\n                    options: {\r\n                        Yes: {\r\n                            selected: name === 'Yes',\r\n                        },\r\n                        No: {\r\n                            selected: name === 'No',\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        setForm(updatedForm)\r\n    }\r\n\r\n    const changeHandler = (id: string, event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\r\n        let updatedForm: IForm = { ...form }\r\n        updatedForm = {\r\n            ...form,\r\n            [id]: {\r\n                ...form[id],\r\n                value: event.target.value\r\n            }\r\n        }\r\n        setForm(updatedForm)\r\n    }\r\n\r\n    const addHandler = () => {\r\n        const selectedLanguages = Object.keys(form.languages.options).filter(option => form.languages.options[option].selected)\r\n\r\n        const newItem: IPortfolioItem = {\r\n            title: form.title.value,\r\n            language: selectedLanguages,\r\n            description: form.description.value,\r\n            link: form.link.value,\r\n            githubLink: form.github.value,\r\n            video_src: form.video_src.value,\r\n            gif_src: form.gif_src.value,\r\n            desktop: form.desktop.options.Yes.selected,\r\n            mobile: form.mobile.options.Yes.selected,\r\n        }\r\n        add(newItem)\r\n    }\r\n    \r\n    const itemFormStyles = [\r\n        css.ItemForm,\r\n        show && css.show\r\n    ].join(' ')\r\n\r\n    const backdropStyles = [\r\n        css.FormBackdrop,\r\n        show && css.show\r\n    ].join(' ')\r\n\r\n    return (\r\n        <>\r\n            <form className={itemFormStyles}>\r\n                { sending && \r\n                    <div className={css.Loading}>\r\n                        <CubeSpinner />\r\n                    </div>\r\n                }\r\n                <FontAwesomeIcon className={css.FormCloseButton} icon={icons.faTimes} onClick={close} />\r\n                { Object.keys(form).map((element: string) => {\r\n                    return (\r\n                        <FormInput key={element} item={form[element]} change={changeHandler} clickOption={optionClickHandler} />\r\n                    )\r\n                })}\r\n                <div className={css.FormAddButton} onClick={addHandler}>\r\n                    <p>add</p>\r\n                </div>\r\n            </form>\r\n            <div className={backdropStyles}></div>\r\n        </>\r\n    )\r\n}\r\n\r\ninterface IFormInput {\r\n    item: any\r\n    change: (id: string, e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => void\r\n    clickOption: (id: string, name: string) => void\r\n}\r\n\r\nconst FormInput: React.FunctionComponent<IFormInput> = React.memo( ({ item, change, clickOption }): JSX.Element => {\r\n    let content = undefined\r\n\r\n    switch (item.elemType) {\r\n        case 'input':\r\n            content = (\r\n                <input value={item.value} \r\n                    placeholder={item.placeholder} \r\n                    onChange={(e) => change(item.id, e)}\r\n                    className={css.FormInput} />\r\n            )\r\n            break;\r\n\r\n        case 'textarea':\r\n            content = (\r\n                <textarea value={item.value}\r\n                    onChange={(e) => change(item.id, e)}\r\n                    placeholder={item.placeholder} \r\n                    className={css.FormInput}\r\n                    rows={5} />\r\n            )\r\n            break;\r\n            \r\n        case 'select':\r\n            content = (\r\n                <div className={css.Select}>\r\n                    { Object.keys(item.options).map((option: any) => {\r\n                        const selected: boolean = item.options[option].selected\r\n                        return (\r\n                            <div key={item.id + option} \r\n                                className={[css.Option, selected && css.selected].join(' ')} \r\n                                onClick={() => clickOption(item.id, option)}>{option}</div>\r\n                        )\r\n                    })}\r\n                </div>\r\n            )\r\n            break;\r\n    }\r\n\r\n    return (\r\n        <div className={css.FormInputContainer}>\r\n            <p className={css.FormInputTitle}>{item.id}</p>\r\n            { content }\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default ItemForm"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAbA;AAiBA;AACA;AArBA;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAJA;AAQA;AAXA;AAaA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAJA;AAQA;AAXA;AArFA;AACA;AA2GA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAIA;AAIA;AAJA;AAJA;AAaA;AACA;AAIA;AACA;AACA;AADA;AAGA;AACA;AADA;AAJA;AAJA;AAcjCA;AACA;AAmCA;AACA;AAAA;AACA;AAAA;AAIA;AAEA;;;;A","sourceRoot":""}