{"version":3,"file":"static/webpack/1.8ed19a840a7f1f2173b4.hot-update.js","sources":["webpack:///./components/ExpandedVideo/ExpandedVideo.tsx"],"sourcesContent":["import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { icons } from '../../icons/icons'\n\nconst css = require('./ExpandedVideo.module.css')\n\ninterface IExpandedVideo {\n    video_src: string\n    close: () => void\n}\n\nconst ExpandedVideo: React.FunctionComponent<IExpandedVideo> = ({ video_src, close }): JSX.Element => {\n    const[unmount, setUnmount] = React.useState(false)\n\n    React.useEffect(() => {\n        window.addEventListener('keydown', keyHandler, true)\n\n        return () => window.removeEventListener('keydown', keyHandler, true)\n    }, [])\n\n    React.useLayoutEffect(() => {\n        // Get original body overflow\n        const originalStyle: string = window.getComputedStyle(document.body).overflow!  \n        // Prevent scrolling on mount\n        document.body.style.overflow = 'hidden'\n        // Re-enable scrolling when component unmounts\n        return () => { document.body.style.overflow = originalStyle }\n    }, []) // Empty array ensures effect is only run on mount and unmount\n\n    const keyHandler = React.useCallback((event: KeyboardEvent) => {\n        console.log(event.key)\n        switch (event.key) {\n            case 'Escape':\n                setUnmount(true)\n                setTimeout(() => {\n                    close()\n                }, 5000)\n                break;\n\n            default:\n                break;\n        }\n    }, [])\n\n    const closeHandler = React.useCallback(() => {\n        setUnmount(true)\n        setTimeout(() => {\n            close()\n        }, 300)\n    }, [close])\n\n    const classes = [\n        css.Main,\n        unmount ? css.unmount : css.mount,\n    ].join(' ')\n\n    return (\n        <div className={classes}>\n            <div className={css.Backdrop} onClick={closeHandler}></div>\n            <div className={css.VideoContainer}>\n                <video className={css.Video} src={video_src} controls muted autoPlay />\n            </div>\n            <div className={css.CloseButton} onClick={closeHandler}>\n                <FontAwesomeIcon icon={icons.faTimes} />\n            </div>\n        </div>\n    )\n}\n\nexport default ExpandedVideo"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAMA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAIA;AACA;AACA;;;;A","sourceRoot":""}