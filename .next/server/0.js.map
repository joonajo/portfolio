{"version":3,"file":"0.js","sources":["webpack:///./components/ExpandedVideo/ExpandedVideo.module.css","webpack:///./components/ExpandedVideo/ExpandedVideo.tsx","webpack:///./components/Item/Item.module.css","webpack:///./components/Item/Item.tsx"],"sourcesContent":["module.exports = {\n\t\"Main\": \"Main___3w2yc\",\n\t\"mount\": \"mount___2v3RS\",\n\t\"fadein\": \"fadein___1ZLib\",\n\t\"unmount\": \"unmount___3mvc-\",\n\t\"Backdrop\": \"Backdrop___3B7tu\",\n\t\"VideoContainer\": \"VideoContainer___2gnni\",\n\t\"Video\": \"Video___QoA7X\",\n\t\"CloseButton\": \"CloseButton____MALA\"\n};","import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { icons } from '../../icons/icons'\n\nconst css = require('./ExpandedVideo.module.css')\n\ninterface IExpandedVideo {\n    video_src: string\n    close: () => void\n}\n\nconst ExpandedVideo: React.FunctionComponent<IExpandedVideo> = ({ video_src, close }): JSX.Element => {\n    const[unmount, setUnmount] = React.useState(false)\n\n    React.useEffect(() => {\n        window.addEventListener('keydown', keyHandler, true)\n\n        return () => window.removeEventListener('keydown', keyHandler, true)\n    }, [])\n\n    React.useLayoutEffect(() => {\n        // Get original body overflow\n        const originalStyle: string = window.getComputedStyle(document.body).overflow!  \n        // Prevent scrolling on mount\n        document.body.style.overflow = 'hidden'\n        // Re-enable scrolling when component unmounts\n        return () => { document.body.style.overflow = originalStyle }\n    }, []) // Empty array ensures effect is only run on mount and unmount\n\n    const keyHandler = React.useCallback((event: KeyboardEvent) => {\n        console.log(event.key)\n        switch (event.key) {\n            case 'Escape':\n                closeHandler()\n                break;\n\n            default:\n                break;\n        }\n    }, [])\n\n    const closeHandler = React.useCallback(() => {\n        setUnmount(true)\n        setTimeout(() => {\n            close()\n        }, 300)\n    }, [close])\n\n    const classes = [\n        css.Main,\n        unmount ? css.unmount : css.mount,\n    ].join(' ')\n\n    return (\n        <div className={classes}>\n            <div className={css.Backdrop} onClick={closeHandler}></div>\n            <div className={css.VideoContainer}>\n                <video className={css.Video} src={video_src} controls muted autoPlay playsInline />\n            </div>\n            <div className={css.CloseButton} onClick={closeHandler}>\n                <FontAwesomeIcon icon={icons.faTimes} />\n            </div>\n        </div>\n    )\n}\n\nexport default ExpandedVideo","module.exports = {\n\t\"Item\": \"Item___2z7E8\",\n\t\"show\": \"show___6kfVr\",\n\t\"Title\": \"Title___3ZaYJ\",\n\t\"ItemContent\": \"ItemContent___3R0xe\",\n\t\"InfoContainer\": \"InfoContainer___2K1Jf\",\n\t\"MadeWith\": \"MadeWith___2_0_d\",\n\t\"Language\": \"Language___3j4M0\",\n\t\"Description\": \"Description___3jL8P\",\n\t\"IconsAndLinks\": \"IconsAndLinks___3W2-o\",\n\t\"HardwareIcons\": \"HardwareIcons___1Zo3h\",\n\t\"HardwareIconContainer\": \"HardwareIconContainer___2Svmz\",\n\t\"HardwareIcon\": \"HardwareIcon___7oC72\",\n\t\"DesktopIcon\": \"DesktopIcon___1I-OD\",\n\t\"MobileIcon\": \"MobileIcon___2Qx5_\",\n\t\"CheckMarkIcon\": \"CheckMarkIcon___11WPT\",\n\t\"TimesIcon\": \"TimesIcon___gPzyh\",\n\t\"ItemLinks\": \"ItemLinks___316VE\",\n\t\"ItemLinkContainer\": \"ItemLinkContainer___3gKyx\",\n\t\"ItemLink\": \"ItemLink___zvdwb\",\n\t\"ItemLinkIcon\": \"ItemLinkIcon___2pksG\",\n\t\"PreviewContainer\": \"PreviewContainer___2378D\",\n\t\"PreviewMask\": \"PreviewMask___BxlQ3\",\n\t\"MaskLinks\": \"MaskLinks___3b_RG\",\n\t\"MaskLink\": \"MaskLink___2Z_QC\",\n\t\"MaskLinkText\": \"MaskLinkText___V2BhR\",\n\t\"MaskLinkIcon\": \"MaskLinkIcon___1xuTX\",\n\t\"ExpandVideo\": \"ExpandVideo___2-0ff\"\n};","import React from 'react'\nimport { IPortfolioItem } from '../../interfaces/interfaces'\nimport { icons } from '../../icons/icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport ExpandedVideo from '../ExpandedVideo/ExpandedVideo'\n\nconst css = require('./Item.module.css')\n\nconst SHOW_TRESHOLD = 100 // pixels\n\nconst Item: React.FunctionComponent<IPortfolioItem> = (props): JSX.Element => {\n  const[showItem, toggleShowItem] = React.useState<boolean>(false)\n  const[showVideo, toggleShowVideo] = React.useState<boolean>(false)\n  const itemRef: React.RefObject<HTMLDivElement> = React.useRef<HTMLDivElement>(null)\n  \n  // update the event listeners every time the showItem state is changed\n  React.useEffect(() => {\n    window.addEventListener('scroll', checkIfInViewport, true)\n  \n    return () => window.removeEventListener('scroll', checkIfInViewport, true)  \n  }, [showItem])\n  \n  const checkIfInViewport = () => {\n    if (itemRef && itemRef.current) {\n      const itemPos: number = itemRef.current.getBoundingClientRect().top\n      const windowHeight: number = window.innerHeight\n  \n      const newShowItem: boolean = itemPos < (windowHeight - SHOW_TRESHOLD)\n      if (newShowItem !== showItem) toggleShowItem(newShowItem)\n    }\n  }\n\n  const itemClasses = [\n    css.Item, \n    showItem && css.show\n  ].join(' ')\n  \n  return (\n    <div className={itemClasses} ref={itemRef} >\n      <p className={css.Title}><span>{props.title}</span></p>\n      <div className={css.ItemContent}>\n        <ItemPreview video_src={props.video_src}\n          preview_src={props.preview_src}\n          gif_src={props.gif_src} \n          link={props.link} \n          githubLink={props.githubLink}\n          toggle={toggleShowVideo} />\n        <ItemInfo languages={props.language}\n          title={props.title}\n          desc={props.description}\n          desktop={props.desktop}\n          mobile={props.mobile}\n          link={props.link}\n          githubLink={props.githubLink} />\n      </div>\n      {showVideo && <ExpandedVideo video_src={props.video_src} close={() => toggleShowVideo(false)} />}\n    </div>\n  )\n}\n\ninterface IItemInfo {\n  languages: string[]\n  title: string\n  desc: string\n  desktop: boolean\n  mobile: boolean\n  link: string\n  githubLink: string\n}\n\nconst ItemInfo: React.FunctionComponent<IItemInfo> = (props): JSX.Element => {\n  return (\n    <div className={css.InfoContainer}>\n      <div className={css.MadeWith}>\n        made with\n        {props.languages.map((lang: string, index: number) => (\n          <p key={lang} className={css.Language}>\n            {lang}\n            {index !== props.languages.length - 1 ? <span style={{color: 'dimgray'}}> + </span> : ''}\n          </p>\n        ))}\n      </div>\n      <p className={css.Description}>\n        {props.desc}\n      </p>\n      <div className={css.IconsAndLinks}>\n        <div className={css.ItemLinks}>\n          <a className={css.ItemLinkContainer} href={props.githubLink} target=\"_blank\" rel=\"noopener noreferrer\">\n            <p className={css.ItemLink}>Github</p>\n            <div className={css.ItemLinkIcon}>\n              <FontAwesomeIcon icon={icons.faGithub} />\n            </div>\n          </a>\n          <a className={css.ItemLinkContainer} href={props.link} target=\"_blank\" rel=\"noopener noreferrer\">\n            <p className={css.ItemLink}>Open</p>\n            <div className={css.ItemLinkIcon}>\n              <FontAwesomeIcon icon={icons.faExternalLinkSquareAlt} />\n            </div>\n          </a>\n        </div>\n        <HardwareIcons desktop={props.desktop} mobile={props.mobile} />\n      </div>\n    </div>\n  )\n}\n\ninterface IHardwareICons {\n  desktop: boolean\n  mobile: boolean\n}\n\nconst HardwareIcons: React.FunctionComponent<IHardwareICons> = ({Â desktop, mobile }): JSX.Element => (\n  <div className={css.HardwareIcons}>\n    <div className={css.HardwareIconContainer}>\n      <div className={[css.HardwareIcon, css.DesktopIcon].join(' ')}>\n        <FontAwesomeIcon icon={icons.faDesktop} />\n      </div>\n      {desktop ?\n        <CheckMarkIcon /> : <TimesIcon />\n      }\n    </div>\n    <div className={css.HardwareIconContainer}>\n      <div className={[css.HardwareIcon, css.MobileIcon].join(' ')}>\n        <FontAwesomeIcon icon={icons.faMobileAlt} />\n      </div>\n      {mobile ? \n        <CheckMarkIcon /> : <TimesIcon />\n      }\n    </div>\n  </div>\n)\n\nconst CheckMarkIcon: React.FunctionComponent = (): JSX.Element => (\n  <div className={[css.HardwareIcon, css.CheckMarkIcon].join(' ')}>\n    <FontAwesomeIcon icon={icons.faCheck} color=\"green\" />\n  </div>\n)\n\nconst TimesIcon: React.FunctionComponent = (): JSX.Element => (\n  <div className={[css.HardwareIcon, css.TimesIcon].join(' ')}>\n    <FontAwesomeIcon icon={icons.faTimes} color=\"crimson\" />\n  </div>\n)\n\ninterface IPreview {\n  video_src: string\n  preview_src?: string\n  gif_src: string\n  link: string\n  githubLink: string\n  toggle: (newValue: boolean) => void\n}\n\nconst ItemPreview: React.FunctionComponent<IPreview> = (props): JSX.Element => {\n  return (\n    <div className={css.PreviewContainer}>\n      <video className={css.PreviewVideo} poster={props.gif_src} muted autoPlay playsInline loop >\n        <source src={props.preview_src} type=\"video/mp4\" />\n      </video>\n      <div className={css.PreviewMask}>\n        <div className={css.MaskLinks}>\n          {/* <MaskLink address={props.link} text=\"Open\" icon={\"link\"} />\n          <MaskLink address={props.githubLink} text=\"Github\" icon={\"github\"} /> */}\n          <ExpandVideo toggle={props.toggle}  />\n        </div>\n      </div>\n    </div>\n  )\n}\n\ninterface IExpandVideo {\n  toggle: (newValue: boolean) => void\n}\n\nconst ExpandVideo: React.FunctionComponent<IExpandVideo> = ({ toggle }): JSX.Element => {\n \n  const classes = [\n    css.ExpandVideo\n  ].join(' ')\n\n  return (\n    <>\n      <div className={classes} onClick={() => toggle(true)}>\n        <p>Expand Video</p>\n        <FontAwesomeIcon icon={icons.faExpand} color='white' />\n      </div>\n    </>\n  )\n}\n\ninterface IMaskLink {\n  address: string\n  text: string\n  icon: string\n}\n\nconst MaskLink: React.FunctionComponent<IMaskLink> = ({ address, text }): JSX.Element => {\n  return (\n      <a href={address} className={css.MaskLink} target='_blank' rel=\"noopener noreferrer\">\n          <div className={css.MaskLinkText}>\n              <span>{text}</span>\n          </div>\n      </a>\n  )\n}\n\nexport default Item"],"mappings":";;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AAMA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAIA;AACA;AACA;;;;;;;;;;;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC5BA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAAA;AAAA;AAGA;AACA;AAWA;AACA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAIA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AAAA;AAIA;AACA;AAMA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAMA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAQA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAYA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAGA;AAAA;AAKA;AACA;AAKA;AAAA;AAAA;AAEA;AAIA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAIA;AACA;AAOA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAKA;AACA;AACA;;;;A","sourceRoot":""}